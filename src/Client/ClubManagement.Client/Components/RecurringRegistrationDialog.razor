@using ClubManagement.Client.Services
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using MudBlazor
@inject IEventService EventService
@inject IMemberService MemberService
@inject ISnackbar Snackbar

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true">
    <DialogContent>
        <MudStack Spacing="4">
            <MudText Typo="Typo.h6">@Title</MudText>
            
            @if (_loading)
            {
                <MudProgressLinear Indeterminate="true" />
                <MudText>Loading recurring event options...</MudText>
            }
            else if (_recurringOptions != null)
            {
                <!-- Recurring Event Series Information -->
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.h6" Color="Color.Primary">@_recurringOptions.SeriesTitle</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                @_recurringOptions.TotalOccurrences upcoming sessions in this series
                            </MudText>
                            
                            @if (_recurringOptions.RecurrencePattern != null)
                            {
                                <MudText Typo="Typo.body2">
                                    <MudIcon Icon="Icons.Material.Filled.Repeat" Size="Size.Small" /> 
                                    @GetRecurrenceDescription(_recurringOptions.RecurrencePattern)
                                </MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>

                <!-- Registration Options -->
                <MudRadioGroup @bind-Value="SelectedOption">
                    <MudStack Spacing="3">
                        <MudRadio Value="RecurringRegistrationOption.ThisOccurrenceOnly"
                                  Color="Color.Primary">
                            <MudStack>
                                <MudText Typo="Typo.subtitle1">This session only</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Register for just this single occurrence
                                </MudText>
                            </MudStack>
                        </MudRadio>

                        <MudRadio Value="RecurringRegistrationOption.AllFutureOccurrences"
                                  Color="Color.Primary">
                            <MudStack>
                                <MudText Typo="Typo.subtitle1">All future sessions (@_recurringOptions.TotalOccurrences)</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Register for all upcoming sessions in this series
                                </MudText>
                            </MudStack>
                        </MudRadio>

                        <MudRadio Value="RecurringRegistrationOption.SelectSpecific"
                                  Color="Color.Primary">
                            <MudStack>
                                <MudText Typo="Typo.subtitle1">Select specific sessions</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Choose which sessions to register for
                                </MudText>
                            </MudStack>
                        </MudRadio>

                        <MudRadio Value="RecurringRegistrationOption.NextN"
                                  Color="Color.Primary">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudStack>
                                    <MudText Typo="Typo.subtitle1">Next N sessions</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        Register for the next few sessions
                                    </MudText>
                                </MudStack>
                                <MudNumericField T="int" @bind-Value="_nextNCount" 
                                                Min="1" Max="@_recurringOptions.TotalOccurrences"
                                                Style="width: 100px;"
                                                Disabled="@(_selectedOption != RecurringRegistrationOption.NextN)" />
                            </MudStack>
                        </MudRadio>
                    </MudStack>
                </MudRadioGroup>

                <!-- Event Selection for SelectSpecific option -->
                @if (_selectedOption == RecurringRegistrationOption.SelectSpecific)
                {
                    <MudCard Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Select Sessions</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Size="Size.Small" OnClick="SelectAllEvents">Select All</MudButton>
                                <MudButton Size="Size.Small" OnClick="ClearEventSelection">Clear All</MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudList T="string" Clickable="true" Dense="true">
                                @foreach (var occurrence in _recurringOptions.UpcomingOccurrences)
                                {
                                    <MudListItem T="string" Icon="@GetEventIcon(occurrence)" 
                                                 IconColor="@GetEventIconColor(occurrence)"
                                                 OnClick="() => ToggleEventSelection(occurrence.Id)">
                                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body1">
                                                    @occurrence.StartDateTime.ToString("MMM dd, yyyy 'at' h:mm tt")
                                                </MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @occurrence.CurrentEnrollment/@occurrence.MaxCapacity enrolled
                                                    @if (occurrence.IsUserRegistered)
                                                    {
                                                        <MudChip T="string" T="string" Size="Size.Small" Color="Color.Success">Already registered</MudChip>
                                                    }
                                                    else if (occurrence.IsFullyBooked)
                                                    {
                                                        <MudChip T="string" T="string" Size="Size.Small" Color="Color.Warning">Full @(occurrence.AllowWaitlist ? "(Waitlist available)" : "")</MudChip>
                                                    }
                                                </MudText>
                                            </MudStack>
                                            <MudCheckBox T="bool" 
                                                        Value="@_selectedEventIds.Contains(occurrence.Id)"
                                                        ValueChanged="@((bool value) => ToggleEventSelection(occurrence.Id))"
                                                        Color="Color.Primary" />
                                        </MudStack>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Member Selection -->
                <MudStack Spacing="2">
                    <MudText Typo="Typo.h6">Select Members to Register</MudText>
                    
                    <MudAutocomplete T="MemberSearchDto"
                                     Value="_selectedMember"
                                     ValueChanged="@OnMemberValueChanged"
                                     SearchFunc="@SearchMembers"
                                     ToStringFunc="@(m => m?.DisplayText ?? "")"
                                     Label="Search for member"
                                     Variant="Variant.Outlined"
                                     AdornmentIcon="Icons.Material.Filled.PersonSearch"
                                     AdornmentColor="Color.Primary"
                                     MinCharacters="2"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="false"
                                     CoerceValue="false"
                                     ShowProgressIndicator="true"
                                     ProgressIndicatorColor="Color.Primary">
                        <ItemTemplate Context="member">
                            <div style="display: flex; align-items: center; gap: 8px;">
                                @if (!string.IsNullOrEmpty(member.ProfilePhotoUrl))
                                {
                                    <MudAvatar Size="Size.Small" Image="@member.ProfilePhotoUrl" />
                                }
                                else
                                {
                                    <MudAvatar Size="Size.Small" Color="Color.Primary">
                                        @(member.FirstName.FirstOrDefault())@(member.LastName.FirstOrDefault())
                                    </MudAvatar>
                                }
                                <div>
                                    <div style="font-weight: 500;">@member.FullName</div>
                                    <div style="font-size: 0.75rem; color: var(--mud-palette-text-secondary);">
                                        @member.MembershipNumber • @member.Email
                                    </div>
                                </div>
                                @if (member.Status != MembershipStatus.Active)
                                {
                                    <MudChip T="string" T="string" Size="Size.Small" Color="Color.Warning" Text="@member.Status.ToString()" />
                                }
                            </div>
                        </ItemTemplate>
                        <NoItemsTemplate>
                            <div style="padding: 8px;">
                                @if (_isSearching)
                                {
                                    <MudText Typo="Typo.body2">Searching...</MudText>
                                }
                                else if (!string.IsNullOrEmpty(_lastSearchTerm) && _lastSearchTerm.Length >= 2)
                                {
                                    <MudText Typo="Typo.body2">No members found for "@_lastSearchTerm"</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2">Type at least 2 characters to search members</MudText>
                                }
                            </div>
                        </NoItemsTemplate>
                    </MudAutocomplete>
                    
                    @if (_selectedMembers.Any())
                    {
                        <MudStack>
                            <MudText Typo="Typo.subtitle2">Selected Members (@_selectedMembers.Count)</MudText>
                            <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="1">
                                @foreach (var member in _selectedMembers)
                                {
                                    <MudChip T="string" T="string" Text="@member.DisplayText" 
                                             OnClose="() => RemoveSelectedMember(member)"
                                             CloseIcon="Icons.Material.Filled.Close" />
                                }
                            </MudStack>
                            <MudButton StartIcon="Icons.Material.Filled.Clear" 
                                       Size="Size.Small" 
                                       OnClick="ClearAllMembers">
                                Clear All
                            </MudButton>
                        </MudStack>
                    }
                </MudStack>

                <!-- Notes -->
                <MudTextField @bind-Value="_notes"
                              Label="Registration Notes (Optional)"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="500" />

                <!-- Registration Summary -->
                @if (HasValidSelection())
                {
                    <MudCard Outlined="true" Style="background-color: var(--mud-palette-background-grey);">
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1" Color="Color.Primary">Registration Summary</MudText>
                            <MudDivider Class="my-2" />
                            <MudStack Spacing="1">
                                <MudText Typo="Typo.body2">
                                    <strong>Events:</strong> @GetSelectedEventsCount() session(s)
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    <strong>Members:</strong> @_selectedMembers.Count member(s)
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    <strong>Total Registrations:</strong> @(GetSelectedEventsCount() * _selectedMembers.Count)
                                </MudText>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }
            }
            else if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!HasValidSelection() || _processing)"
                   StartIcon="@(_processing ? Icons.Material.Filled.Schedule : Icons.Material.Filled.AppRegistration)">
            @(_processing ? "Registering..." : $"Register {GetSelectedEventsCount() * _selectedMembers.Count} Registration(s)")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    
    [Parameter] public string Title { get; set; } = "Register for Recurring Event";
    [Parameter] public Guid EventId { get; set; }
    [Parameter] public Guid MasterEventId { get; set; }
    [Parameter] public bool IsForSelf { get; set; } = false;
    
    private RecurringEventOptionsDto? _recurringOptions;
    private bool _loading = true;
    private string? _errorMessage;
    private bool _processing = false;
    
    // Registration options
    private RecurringRegistrationOption _selectedOption = RecurringRegistrationOption.ThisOccurrenceOnly;
    private RecurringRegistrationOption SelectedOption
    {
        get => _selectedOption;
        set
        {
            if (_selectedOption != value)
            {
                _selectedOption = value;
                OnSelectedOptionChanged(value);
            }
        }
    }
    private int _nextNCount = 1;
    private HashSet<Guid> _selectedEventIds = new();
    
    // Member selection
    private MemberSearchDto? _selectedMember;
    private List<MemberSearchDto> _selectedMembers = new();
    private bool _isSearching = false;
    private string _lastSearchTerm = string.Empty;
    
    // Registration notes
    private string _notes = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecurringOptionsAsync();
    }

    private async Task LoadRecurringOptionsAsync()
    {
        _loading = true;
        _errorMessage = null;
        
        try
        {
            var response = await EventService.GetRecurringEventOptionsAsync(MasterEventId);
            if (response?.Success == true && response.Data != null)
            {
                _recurringOptions = response.Data;
                
                // For self-registration, add current user if possible
                if (IsForSelf)
                {
                    // This would need to be implemented to get current user's member info
                    // For now, we'll let them select themselves through the search
                }
            }
            else
            {
                _errorMessage = response?.Message ?? "Failed to load recurring event options";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading event options: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task<IEnumerable<MemberSearchDto>> SearchMembers(string searchTerm, CancellationToken cancellationToken)
    {
        _lastSearchTerm = searchTerm;
        
        if (string.IsNullOrWhiteSpace(searchTerm) || searchTerm.Length < 2)
        {
            return new List<MemberSearchDto>();
        }

        _isSearching = true;
        try
        {
            var request = new MemberQuickSearchRequest
            {
                SearchTerm = searchTerm,
                MaxResults = 20,
                IncludeInactive = false
            };

            var response = await MemberService.SearchMembersAsync(request);
            if (response?.Success == true && response.Data != null)
            {
                // Filter out already selected members
                var selectedIds = _selectedMembers.Select(m => m.Id).ToHashSet();
                return response.Data.Where(m => !selectedIds.Contains(m.Id));
            }
            else
            {
                if (!string.IsNullOrEmpty(response?.Message))
                {
                    Snackbar.Add($"Search failed: {response.Message}", Severity.Error);
                }
                return new List<MemberSearchDto>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Search error: {ex.Message}", Severity.Error);
            return new List<MemberSearchDto>();
        }
        finally
        {
            _isSearching = false;
        }
    }

    private void OnMemberValueChanged(MemberSearchDto? member)
    {
        if (member == null) return;
        
        if (!_selectedMembers.Any(m => m.Id == member.Id))
        {
            _selectedMembers.Add(member);
            _selectedMember = null; // Clear autocomplete
            StateHasChanged();
        }
    }

    private void RemoveSelectedMember(MemberSearchDto member)
    {
        _selectedMembers.RemoveAll(m => m.Id == member.Id);
        StateHasChanged();
    }

    private void ClearAllMembers()
    {
        _selectedMembers.Clear();
        _selectedMember = null;
        StateHasChanged();
    }

    private void ToggleEventSelection(Guid eventId)
    {
        if (_selectedEventIds.Contains(eventId))
        {
            _selectedEventIds.Remove(eventId);
        }
        else
        {
            _selectedEventIds.Add(eventId);
        }
        StateHasChanged();
    }

    private void SelectAllEvents()
    {
        if (_recurringOptions?.UpcomingOccurrences != null)
        {
            _selectedEventIds = _recurringOptions.UpcomingOccurrences
                .Where(e => !e.IsUserRegistered) // Don't select events already registered for
                .Select(e => e.Id)
                .ToHashSet();
            StateHasChanged();
        }
    }

    private void ClearEventSelection()
    {
        _selectedEventIds.Clear();
        StateHasChanged();
    }

    private void OnSelectedOptionChanged(RecurringRegistrationOption newOption)
    {
        _selectedOption = newOption;
        
        // Reset selections when option changes
        if (newOption != RecurringRegistrationOption.SelectSpecific)
        {
            _selectedEventIds.Clear();
        }
        
        // Reset next N count when changing away from NextN
        if (newOption != RecurringRegistrationOption.NextN)
        {
            _nextNCount = 1;
        }
        
        StateHasChanged();
    }

    private bool HasValidSelection()
    {
        return _selectedMembers.Any() && GetSelectedEventsCount() > 0;
    }

    private int GetSelectedEventsCount()
    {
        if (_recurringOptions?.UpcomingOccurrences == null) return 0;
        
        return _selectedOption switch
        {
            RecurringRegistrationOption.ThisOccurrenceOnly => 1,
            RecurringRegistrationOption.AllFutureOccurrences => _recurringOptions.TotalOccurrences,
            RecurringRegistrationOption.SelectSpecific => _selectedEventIds.Count,
            RecurringRegistrationOption.NextN => Math.Min(_nextNCount, _recurringOptions.TotalOccurrences),
            _ => 0
        };
    }

    private List<Guid> GetSelectedEventIds()
    {
        if (_recurringOptions?.UpcomingOccurrences == null) return new List<Guid>();
        
        return _selectedOption switch
        {
            RecurringRegistrationOption.ThisOccurrenceOnly => new List<Guid> { EventId },
            RecurringRegistrationOption.AllFutureOccurrences => _recurringOptions.UpcomingOccurrences.Select(e => e.Id).ToList(),
            RecurringRegistrationOption.SelectSpecific => _selectedEventIds.ToList(),
            RecurringRegistrationOption.NextN => _recurringOptions.UpcomingOccurrences.Take(_nextNCount).Select(e => e.Id).ToList(),
            _ => new List<Guid>()
        };
    }

    private async Task Submit()
    {
        if (!HasValidSelection() || _processing) return;
        
        _processing = true;
        
        try
        {
            var request = new BulkEventRegistrationRequest
            {
                EventIds = GetSelectedEventIds(),
                MemberIds = _selectedMembers.Select(m => m.Id).ToList(),
                RegistrationOption = _selectedOption,
                NextOccurrences = _selectedOption == RecurringRegistrationOption.NextN ? _nextNCount : null,
                Notes = string.IsNullOrWhiteSpace(_notes) ? null : _notes
            };

            var response = await EventService.BulkRegisterForEventsAsync(request);
            
            if (response?.Success == true && response.Data != null)
            {
                var result = response.Data;
                var successMessage = $"Registration completed: {result.SuccessfulRegistrations} successful";
                
                if (result.FailedRegistrations > 0)
                {
                    successMessage += $", {result.FailedRegistrations} failed";
                }
                
                if (result.Warnings.Any())
                {
                    successMessage += $" (with {result.Warnings.Count} warnings)";
                }

                MudDialog.Close(DialogResult.Ok(result));
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Registration failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error during registration: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private string GetRecurrenceDescription(RecurrencePattern pattern)
    {
        return pattern.Type switch
        {
            RecurrenceType.Daily => $"Daily, every {pattern.Interval} day(s)",
            RecurrenceType.Weekly => $"Weekly on {string.Join(", ", pattern.DaysOfWeek ?? new List<DayOfWeek>())}",
            RecurrenceType.Monthly => $"Monthly, every {pattern.Interval} month(s)",
            RecurrenceType.Yearly => $"Yearly, every {pattern.Interval} year(s)",
            _ => "Custom recurrence"
        };
    }

    private string GetEventIcon(EventOccurrenceDto occurrence)
    {
        if (occurrence.IsUserRegistered)
            return Icons.Material.Filled.CheckCircle;
        if (occurrence.IsFullyBooked)
            return Icons.Material.Filled.Warning;
        return Icons.Material.Filled.Event;
    }

    private Color GetEventIconColor(EventOccurrenceDto occurrence)
    {
        if (occurrence.IsUserRegistered)
            return Color.Success;
        if (occurrence.IsFullyBooked)
            return Color.Warning;
        return Color.Default;
    }
}