@page "/members/{Id:guid}/edit"
@using ClubManagement.Client.Services
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using ClubManagement.Shared.Models.Authorization
@using System.ComponentModel.DataAnnotations
@inject IMemberService MemberService
@inject IMemberPermissionService PermissionService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Edit Member - Club Management</PageTitle>

<MudBreadcrumbs Items="_breadcrumbItems" />

@if (_isLoading)
{
    <MudStack AlignItems="AlignItems.Center" Class="pa-8">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" />
        <MudText>Loading member details...</MudText>
    </MudStack>
}
else if (!_permissions.CanEdit)
{
    <MudAlert Severity="Severity.Error">
        You don't have permission to edit this member.
    </MudAlert>
}
else if (_member != null && _request != null)
{
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Edit @_member.FullName</MudText>
            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="@Icons.Material.Filled.Visibility"
                           OnClick="@(() => Navigation.NavigateTo($"/members/{Id}"))">
                    View Details
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="@(() => Navigation.NavigateTo("/members"))">
                    Back to Members
                </MudButton>
            </MudStack>
        </MudStack>

        <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
            <MudGrid>
                <!-- Basic Information -->
                <MudItem xs="12">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Basic Information</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="_request.FirstName" 
                                                  Label="First Name" 
                                                  Required="true"
                                                  RequiredError="First name is required"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="_request.LastName" 
                                                  Label="Last Name" 
                                                  Required="true"
                                                  RequiredError="Last name is required"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="_request.Email" 
                                                  Label="Email" 
                                                  Required="true"
                                                  RequiredError="Email is required"
                                                  Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email format" })"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="_request.PhoneNumber" 
                                                  Label="Phone Number" 
                                                  Required="true"
                                                  RequiredError="Phone number is required"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudDatePicker @bind-Date="_request.DateOfBirth" 
                                                   Label="Date of Birth" 
                                                   Variant="Variant.Outlined"
                                                   MaxDate="DateTime.Today.AddYears(-13)" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="_request.Gender" 
                                               Label="Gender" 
                                               Variant="Variant.Outlined">
                                        <MudSelectItem Value="@("Male")">Male</MudSelectItem>
                                        <MudSelectItem Value="@("Female")">Female</MudSelectItem>
                                        <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                                        <MudSelectItem Value="@("Prefer not to say")">Prefer not to say</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Membership Information -->
                <MudItem xs="12" md="6">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Membership Information</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField Label="Membership Number" 
                                                  Value="@_member.MembershipNumber" 
                                                  ReadOnly="true" 
                                                  Variant="Variant.Outlined"
                                                  HelperText="Membership number cannot be changed" />
                                </MudItem>
                                @if (_permissions.CanChangeTier)
                                {
                                    <MudItem xs="12">
                                        <MudSelect @bind-Value="_request.Tier" 
                                                   Label="Membership Tier" 
                                                   Required="true"
                                                   RequiredError="Membership tier is required"
                                                   Variant="Variant.Outlined">
                                            @foreach (MembershipTier tier in Enum.GetValues<MembershipTier>())
                                            {
                                                <MudSelectItem Value="tier">@tier</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                }
                                else
                                {
                                    <MudItem xs="12">
                                        <MudTextField Label="Membership Tier" 
                                                      Value="@_member.Tier.ToString()" 
                                                      ReadOnly="true" 
                                                      Variant="Variant.Outlined"
                                                      HelperText="You don't have permission to change membership tier" />
                                    </MudItem>
                                }
                                @if (_permissions.CanChangeStatus)
                                {
                                    <MudItem xs="12">
                                        <MudSelect @bind-Value="_request.Status" 
                                                   Label="Status" 
                                                   Required="true"
                                                   RequiredError="Status is required"
                                                   Variant="Variant.Outlined">
                                            @foreach (MembershipStatus status in Enum.GetValues<MembershipStatus>())
                                            {
                                                <MudSelectItem Value="status">@status</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                }
                                else
                                {
                                    <MudItem xs="12">
                                        <MudTextField Label="Status" 
                                                      Value="@_member.Status.ToString()" 
                                                      ReadOnly="true" 
                                                      Variant="Variant.Outlined"
                                                      HelperText="You don't have permission to change status" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Emergency Contact -->
                @if (_permissions.CanEditEmergencyContact)
                {
                    <MudItem xs="12" md="6">
                        <MudCard>
                            <MudCardHeader>
                                <MudText Typo="Typo.h6">Emergency Contact</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudTextField @bind-Value="_request.EmergencyContactName" 
                                                      Label="Contact Name" 
                                                      Required="true"
                                                      RequiredError="Emergency contact name is required"
                                                      Variant="Variant.Outlined" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="_request.EmergencyContactPhone" 
                                                      Label="Contact Phone" 
                                                      Required="true"
                                                      RequiredError="Emergency contact phone is required"
                                                      Variant="Variant.Outlined" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="_request.EmergencyContactRelationship" 
                                                      Label="Relationship" 
                                                      Required="true"
                                                      RequiredError="Relationship is required"
                                                      Variant="Variant.Outlined" />
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }

                <!-- Actions -->
                <MudItem xs="12">
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   OnClick="UpdateMember"
                                   Disabled="@(!_isFormValid || _isUpdating)"
                                   StartIcon="@Icons.Material.Filled.Save">
                            @if (_isUpdating)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span class="ml-2">Updating...</span>
                            }
                            else
                            {
                                <span>Update Member</span>
                            }
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   OnClick="@(() => Navigation.NavigateTo($"/members/{Id}"))"
                                   Disabled="_isUpdating">
                            Cancel
                        </MudButton>
                    </MudCardActions>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudStack>
}
else
{
    <MudAlert Severity="Severity.Error">
        Member not found or you don't have permission to edit this member.
    </MudAlert>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private List<BreadcrumbItem> _breadcrumbItems = new();
    private MemberDto? _member;
    private UpdateMemberRequest? _request;
    private MemberPermissions _permissions = new();
    private MudForm _form = null!;
    private bool _isFormValid = false;
    private bool _isLoading = true;
    private bool _isUpdating = false;

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Members", href: "/members", icon: Icons.Material.Filled.People),
            new BreadcrumbItem("Edit", href: null, disabled: true, icon: Icons.Material.Filled.Edit)
        };

        await Task.WhenAll(
            LoadMember(),
            LoadPermissions()
        );
    }

    private async Task LoadMember()
    {
        try
        {
            var response = await MemberService.GetMemberAsync(Id);
            if (response?.Success == true && response.Data != null)
            {
                _member = response.Data;
                
                // Initialize the update request with current member data
                _request = new UpdateMemberRequest
                {
                    FirstName = _member.FirstName,
                    LastName = _member.LastName,
                    Email = _member.Email,
                    PhoneNumber = _member.PhoneNumber,
                    DateOfBirth = _member.DateOfBirth,
                    Gender = _member.Gender,
                    Tier = _member.Tier,
                    Status = _member.Status,
                    EmergencyContactName = _member.EmergencyContact?.Name ?? string.Empty,
                    EmergencyContactPhone = _member.EmergencyContact?.PhoneNumber ?? string.Empty,
                    EmergencyContactRelationship = _member.EmergencyContact?.Relationship ?? string.Empty
                };
                
                // Update breadcrumb with member name
                _breadcrumbItems[2] = new BreadcrumbItem($"Edit {_member.FirstName} {_member.LastName}", href: null, disabled: true, icon: Icons.Material.Filled.Edit);
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to load member", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading member: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadPermissions()
    {
        try
        {
            _permissions = await PermissionService.GetMemberPermissionsAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading permissions: {ex.Message}", Severity.Warning);
        }
    }

    private async Task UpdateMember()
    {
        if (!_isFormValid || _isUpdating || _request == null || _member == null) return;

        _isUpdating = true;
        StateHasChanged();

        try
        {
            var response = await MemberService.UpdateMemberAsync(Id, _request);
            if (response?.Success == true)
            {
                Snackbar.Add($"Member {_request.FirstName} {_request.LastName} updated successfully", Severity.Success);
                Navigation.NavigateTo($"/members/{Id}");
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to update member", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating member: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUpdating = false;
            StateHasChanged();
        }
    }
}