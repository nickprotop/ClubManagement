@page "/hardware/{id:guid}/edit"
@using ClubManagement.Client.Services
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using ClubManagement.Shared.Models.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IHardwareService HardwareService
@inject IHardwareTypeService HardwareTypeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Edit Hardware</PageTitle>

@if (_loading)
{
    <MudProgressLinear Indeterminate="true" />
}
else if (_model != null)
{
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudBreadcrumbs Items="_breadcrumbs" Class="pa-0"></MudBreadcrumbs>
            <MudText Typo="Typo.h4" Class="mt-2">Edit Hardware</MudText>
        </div>
    </div>

    <MudCard>
        <MudCardContent>
            <EditForm Model="_model" OnValidSubmit="UpdateHardware">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column gap-4">
                    
                    <!-- Basic Information -->
                    <MudText Typo="Typo.h6" Class="mb-2">Basic Information</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.Name"
                                     Label="Hardware Name"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _model.Name)"
                                     Class="flex-grow-1" />
                                     
                        <MudSelect @bind-Value="_model.HardwareTypeId"
                                  Label="Hardware Type"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _model.HardwareTypeId)"
                                  OnSelectionChanged="OnHardwareTypeChanged"
                                  Class="flex-grow-1">
                            @if (_hardwareTypes != null)
                            {
                                @foreach (var type in _hardwareTypes)
                                {
                                    <MudSelectItem T="Guid" Value="type.Id">@type.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </div>

                    <MudTextField @bind-Value="_model.Description"
                                 Label="Description"
                                 Variant="Variant.Outlined"
                                 Lines="3"
                                 For="@(() => _model.Description)" />

                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.SerialNumber"
                                     Label="Serial Number"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.SerialNumber)"
                                     Class="flex-grow-1" />
                                     
                        <MudTextField @bind-Value="_model.Location"
                                     Label="Location"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.Location)"
                                     Class="flex-grow-1" />
                    </div>

                    <div>
                        <MudSelect @bind-Value="_model.Status"
                                  Label="Status"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  For="@(() => _model.Status)">
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Available">Available</MudSelectItem>
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Assigned">Assigned</MudSelectItem>
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.InUse">In Use</MudSelectItem>
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Maintenance">Maintenance</MudSelectItem>
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.OutOfService">Out of Service</MudSelectItem>
                            <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Retired">Retired</MudSelectItem>
                        </MudSelect>
                    </div>

                    <!-- Purchase Information -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Purchase Information</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudDatePicker @bind-Date="_model.PurchaseDate"
                                      Label="Purchase Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.PurchaseDate)"
                                      Class="flex-grow-1" />
                                      
                        <MudNumericField @bind-Value="_model.PurchasePrice"
                                        Label="Purchase Price"
                                        Variant="Variant.Outlined"
                                        Format="C"
                                        For="@(() => _model.PurchasePrice)"
                                        Class="flex-grow-1" />
                    </div>

                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.Supplier"
                                     Label="Supplier"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.Supplier)"
                                     Class="flex-grow-1" />
                                     
                        <MudDatePicker @bind-Date="_model.WarrantyExpiry"
                                      Label="Warranty Expiry"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.WarrantyExpiry)"
                                      Class="flex-grow-1" />
                    </div>

                    <!-- Maintenance Information -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Maintenance</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudDatePicker @bind-Date="_model.LastMaintenanceDate"
                                      Label="Last Maintenance Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.LastMaintenanceDate)"
                                      Class="flex-grow-1" />
                                      
                        <MudDatePicker @bind-Date="_model.NextMaintenanceDate"
                                      Label="Next Maintenance Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.NextMaintenanceDate)"
                                      Class="flex-grow-1" />
                    </div>

                    <!-- Dynamic Properties -->
                    @if (_selectedHardwareType != null && _selectedHardwareType.PropertySchema?.Properties?.Any() == true)
                    {
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.h6" Class="mb-2">Specifications</MudText>
                        
                        @foreach (var propertyDef in _selectedHardwareType.PropertySchema.Properties)
                        {
                            <div class="mb-3">
                                @switch (propertyDef.Type)
                                {
                                    case PropertyType.Text:
                                        <MudTextField @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                     Label="@propertyDef.Label"
                                                     Variant="Variant.Outlined"
                                                     Required="@propertyDef.Required" />
                                        break;
                                        
                                    case PropertyType.Number:
                                        <MudTextField @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                     Label="@propertyDef.Label"
                                                     Variant="Variant.Outlined"
                                                     Required="@propertyDef.Required"
                                                     InputType="InputType.Number" />
                                        break;
                                        
                                    case PropertyType.Boolean:
                                        <MudCheckBox Value="@GetBooleanValue(propertyDef.Key)"
                                                   ValueChanged="@((bool value) => SetBooleanValue(propertyDef.Key, value))"
                                                   Label="@propertyDef.Label"
                                                   Color="Color.Primary" />
                                        break;
                                        
                                    case PropertyType.Select:
                                        <MudSelect @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                  Label="@propertyDef.Label"
                                                  Variant="Variant.Outlined"
                                                  Required="@propertyDef.Required">
                                            @if (propertyDef.Options != null)
                                            {
                                                @foreach (var option in propertyDef.Options)
                                                {
                                                    <MudSelectItem T="string" Value="@option">@option</MudSelectItem>
                                                }
                                            }
                                        </MudSelect>
                                        break;
                                }
                            </div>
                        }
                    }

                    <!-- Actions -->
                    <MudDivider Class="my-4" />
                    <div class="d-flex justify-end gap-2">
                        <MudButton Variant="Variant.Outlined"
                                  OnClick="Cancel">
                            Cancel
                        </MudButton>
                        
                        <MudButton ButtonType="ButtonType.Submit"
                                  Variant="Variant.Filled"
                                  Color="Color.Primary"
                                  Disabled="_submitting"
                                  StartIcon="@Icons.Material.Filled.Save">
                            @if (_submitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span class="ml-2">Updating...</span>
                            }
                            else
                            {
                                <span>Update Hardware</span>
                            }
                        </MudButton>
                    </div>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudAlert Severity="Severity.Error">Hardware not found</MudAlert>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private UpdateHardwareRequest? _model;
    private List<HardwareTypeDto>? _hardwareTypes;
    private HardwareTypeDto? _selectedHardwareType;
    private Dictionary<string, string> _dynamicProperties = new();
    private bool _loading = true;
    private bool _submitting = false;

    private List<BreadcrumbItem> _breadcrumbs = new();

    protected override async Task OnInitializedAsync()
    {
        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("Home", "/"),
            new("Hardware", "/hardware"),
            new("Edit", null, disabled: true)
        };

        await LoadHardwareTypes();
        await LoadHardware();
    }

    private async Task LoadHardwareTypes()
    {
        try
        {
            var response = await HardwareTypeService.GetHardwareTypesAsync();
            if (response.Success)
            {
                _hardwareTypes = response.Data;
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to load hardware types");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load hardware types: {ex.Message}");
        }
    }

    private async Task LoadHardware()
    {
        try
        {
            var response = await HardwareService.GetHardwareByIdAsync(Id);
            if (response.Success)
            {
                var hardware = response.Data!;
                _model = new UpdateHardwareRequest
                {
                    Name = hardware.Name,
                    Description = hardware.Description,
                    HardwareTypeId = hardware.HardwareTypeId,
                    SerialNumber = hardware.SerialNumber,
                    Location = hardware.Location,
                    Status = hardware.Status,
                    PurchaseDate = hardware.PurchaseDate,
                    PurchasePrice = hardware.PurchasePrice,
                    Supplier = hardware.Supplier,
                    WarrantyExpiry = hardware.WarrantyExpiry,
                    LastMaintenanceDate = hardware.LastMaintenanceDate,
                    NextMaintenanceDate = hardware.NextMaintenanceDate,
                    Properties = new Dictionary<string, string>()
                };

                // Initialize dynamic properties
                _dynamicProperties = new Dictionary<string, string>();
                if (hardware.Properties != null)
                {
                    foreach (var prop in hardware.Properties)
                    {
                        _dynamicProperties[prop.Key] = prop.Value?.ToString() ?? "";
                    }
                }
                
                // Set selected hardware type to load property schema
                _selectedHardwareType = _hardwareTypes?.FirstOrDefault(ht => ht.Id == hardware.HardwareTypeId);
                
                // Initialize missing properties with defaults
                if (_selectedHardwareType?.PropertySchema?.Properties != null)
                {
                    foreach (var prop in _selectedHardwareType.PropertySchema.Properties)
                    {
                        if (!_dynamicProperties.ContainsKey(prop.Key))
                        {
                            _dynamicProperties[prop.Key] = prop.DefaultValue ?? "";
                        }
                    }
                }
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to load hardware");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load hardware: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void OnHardwareTypeChanged()
    {
        if (_model == null) return;
        
        _selectedHardwareType = _hardwareTypes?.FirstOrDefault(ht => ht.Id == _model.HardwareTypeId);
        
        // Preserve existing properties that match new schema
        var newProperties = new Dictionary<string, string>();
        
        if (_selectedHardwareType?.PropertySchema?.Properties != null)
        {
            foreach (var prop in _selectedHardwareType.PropertySchema.Properties)
            {
                if (_dynamicProperties.ContainsKey(prop.Key))
                {
                    newProperties[prop.Key] = _dynamicProperties[prop.Key];
                }
                else
                {
                    newProperties[prop.Key] = prop.DefaultValue ?? "";
                }
            }
        }
        
        _dynamicProperties = newProperties;
        StateHasChanged();
    }

    private bool GetBooleanValue(string key)
    {
        return _dynamicProperties.TryGetValue(key, out var value) && 
               bool.TryParse(value, out var boolValue) && boolValue;
    }
    
    private void SetBooleanValue(string key, bool value)
    {
        _dynamicProperties[key] = value.ToString();
    }

    private async Task UpdateHardware()
    {
        if (_model == null) return;
        
        try
        {
            _submitting = true;
            
            // Set dynamic properties
            _model.Properties = _dynamicProperties.Where(kv => !string.IsNullOrEmpty(kv.Value))
                                                 .ToDictionary(kv => kv.Key, kv => kv.Value);

            var response = await HardwareService.UpdateHardwareAsync(Id, _model);
            if (response.Success)
            {
                await NotificationService.ShowSuccessAsync("Hardware updated successfully");
                Navigation.NavigateTo($"/hardware/{Id}");
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to update hardware");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to update hardware: {ex.Message}");
        }
        finally
        {
            _submitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/hardware/{Id}");
    }
}