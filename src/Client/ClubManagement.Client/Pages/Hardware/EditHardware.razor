@page "/hardware/{id:guid}/edit"
@using ClubManagement.Client.Services
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using ClubManagement.Shared.Models.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IHardwareService HardwareService
@inject IHardwareTypeService HardwareTypeService
@inject IHardwareAssignmentService AssignmentService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Edit Hardware</PageTitle>

@if (_loading)
{
    <MudProgressLinear Indeterminate="true" />
}
else if (_model != null && _hardware != null)
{
    <div class="d-flex justify-space-between align-center mb-4">
        <div>
            <MudBreadcrumbs Items="_breadcrumbs" Class="pa-0"></MudBreadcrumbs>
            <MudText Typo="Typo.h4" Class="mt-2">
                <MudIcon Icon="@_hardware.HardwareTypeIcon" Class="mr-2" />
                Edit @_hardware.Name
            </MudText>
        </div>
    </div>

    <MudCard>
        <MudCardContent>
            <EditForm Model="_model" OnValidSubmit="UpdateHardwareAsync">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column gap-4">
                    
                    <!-- Basic Information -->
                    <MudText Typo="Typo.h6" Class="mb-2">Basic Information</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.Name"
                                     Label="Hardware Name"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     For="@(() => _model.Name)"
                                     Class="flex-grow-1" />
                                     
                        <MudTextField @bind-Value="_model.SerialNumber"
                                     Label="Serial Number"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.SerialNumber)"
                                     Class="flex-grow-1" />
                    </div>

                    <MudTextField @bind-Value="_model.Description"
                                 Label="Description"
                                 Variant="Variant.Outlined"
                                 Lines="3"
                                 For="@(() => _model.Description)" />

                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.Location"
                                     Label="Location"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.Location)"
                                     Class="flex-grow-1" />

                        <!-- Status Field with Assignment Checking -->
                        @if (_checkingAssignments)
                        {
                            <MudSkeleton Width="100%" Height="56px" />
                        }
                        else
                        {
                            <MudSelect @bind-Value="_model.Status"
                                      Label="Status"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      Disabled="@_hasActiveAssignments"
                                      For="@(() => _model.Status)"
                                      HelperText="@GetStatusHelperText()"
                                      Class="flex-grow-1">
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Available">Available</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Unavailable">Unavailable</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.InUse">In Use</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Maintenance">Maintenance</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.OutOfOrder">Out of Order</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.OutOfService">Out of Service</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Lost">Lost</MudSelectItem>
                                <MudSelectItem T="HardwareStatus" Value="HardwareStatus.Retired">Retired</MudSelectItem>
                            </MudSelect>
                        }
                    </div>

                    <!-- Status Lock Alert -->
                    @if (_hasActiveAssignments)
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-2">
                            <div class="d-flex align-center justify-space-between">
                                <div>
                                    <MudIcon Icon="@Icons.Material.Filled.Lock" Class="mr-2" />
                                    Status is locked due to active assignments:
                                    @if (_activeAssignments?.Any() == true)
                                    {
                                        <ul class="mt-2 mb-0">
                                            @foreach (var assignment in _activeAssignments)
                                            {
                                                <li>@assignment.MemberName (assigned @assignment.DaysAssigned days ago)</li>
                                            }
                                        </ul>
                                    }
                                    <MudText Typo="Typo.caption" Class="mt-2">
                                        Process returns first to change hardware status.
                                    </MudText>
                                </div>
                            </div>
                        </MudAlert>
                    }

                    <!-- Purchase Information -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Purchase Information</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudDatePicker @bind-Date="_model.PurchaseDate"
                                      Label="Purchase Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.PurchaseDate)"
                                      Class="flex-grow-1" />
                                      
                        <MudNumericField @bind-Value="_model.PurchasePrice"
                                        Label="Purchase Price"
                                        Variant="Variant.Outlined"
                                        Format="C"
                                        For="@(() => _model.PurchasePrice)"
                                        Class="flex-grow-1" />
                    </div>

                    <div class="d-flex gap-4">
                        <MudTextField @bind-Value="_model.Supplier"
                                     Label="Supplier"
                                     Variant="Variant.Outlined"
                                     For="@(() => _model.Supplier)"
                                     Class="flex-grow-1" />
                                     
                        <MudDatePicker @bind-Date="_model.WarrantyExpiry"
                                      Label="Warranty Expiry"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.WarrantyExpiry)"
                                      Class="flex-grow-1" />
                    </div>

                    <!-- Maintenance Information -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Maintenance</MudText>
                    
                    <div class="d-flex gap-4">
                        <MudDatePicker @bind-Date="_model.LastMaintenanceDate"
                                      Label="Last Maintenance Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.LastMaintenanceDate)"
                                      Class="flex-grow-1" />
                                      
                        <MudDatePicker @bind-Date="_model.NextMaintenanceDate"
                                      Label="Next Maintenance Date"
                                      Variant="Variant.Outlined"
                                      For="@(() => _model.NextMaintenanceDate)"
                                      Class="flex-grow-1" />
                    </div>

                    <MudTextField @bind-Value="_model.Notes"
                                 Label="Notes"
                                 Variant="Variant.Outlined"
                                 Lines="3"
                                 For="@(() => _model.Notes)" />

                    <!-- Dynamic Properties -->
                    @if (_selectedHardwareType != null && _selectedHardwareType.PropertySchema?.Properties?.Any() == true)
                    {
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.h6" Class="mb-2">Specifications</MudText>
                        
                        @foreach (var propertyDef in _selectedHardwareType.PropertySchema.Properties)
                        {
                            <div class="mb-3">
                                @switch (propertyDef.Type)
                                {
                                    case PropertyType.Text:
                                        <MudTextField @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                     Label="@propertyDef.Label"
                                                     Variant="Variant.Outlined"
                                                     Required="@propertyDef.Required" />
                                        break;
                                        
                                    case PropertyType.Number:
                                        <MudTextField @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                     Label="@propertyDef.Label"
                                                     Variant="Variant.Outlined"
                                                     Required="@propertyDef.Required"
                                                     InputType="InputType.Number" />
                                        break;
                                        
                                    case PropertyType.Boolean:
                                        <MudCheckBox Value="@GetBooleanValue(propertyDef.Key)"
                                                   ValueChanged="@((bool value) => SetBooleanValue(propertyDef.Key, value))"
                                                   Label="@propertyDef.Label"
                                                   Color="Color.Primary" />
                                        break;
                                        
                                    case PropertyType.Select:
                                        <MudSelect @bind-Value="_dynamicProperties[propertyDef.Key]"
                                                  Label="@propertyDef.Label"
                                                  Variant="Variant.Outlined"
                                                  Required="@propertyDef.Required">
                                            @if (propertyDef.Options != null)
                                            {
                                                @foreach (var option in propertyDef.Options)
                                                {
                                                    <MudSelectItem Value="@option">@option</MudSelectItem>
                                                }
                                            }
                                        </MudSelect>
                                        break;
                                }
                            </div>
                        }
                    }

                    <!-- Actions -->
                    <MudDivider Class="my-4" />
                    <div class="d-flex justify-end gap-2">
                        <MudButton Variant="Variant.Outlined"
                                  OnClick="Cancel">
                            Cancel
                        </MudButton>
                        
                        <MudButton ButtonType="ButtonType.Submit"
                                  Variant="Variant.Filled"
                                  Color="Color.Primary"
                                  Disabled="_submitting"
                                  StartIcon="@Icons.Material.Filled.Save">
                            @if (_submitting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span class="ml-2">Updating...</span>
                            }
                            else
                            {
                                <span>Update Hardware</span>
                            }
                        </MudButton>
                    </div>
                </div>
            </EditForm>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudAlert Severity="Severity.Error">Hardware not found</MudAlert>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private UpdateHardwareRequest _model = new();
    private HardwareDto? _hardware;
    private List<HardwareTypeDto>? _hardwareTypes;
    private HardwareTypeDto? _selectedHardwareType;
    private Dictionary<string, string> _dynamicProperties = new();
    private List<HardwareAssignmentDto>? _activeAssignments;
    private bool _loading = true;
    private bool _submitting = false;
    private bool _checkingAssignments = true;
    private bool _hasActiveAssignments = false;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new("Home", "/dashboard"),
        new("Hardware", "/hardware"),
        new("Edit", null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadHardware();
        await LoadHardwareTypes();
        await CheckActiveAssignments();
        _loading = false;
    }

    private async Task LoadHardware()
    {
        try
        {
            var response = await HardwareService.GetHardwareByIdAsync(Id);
            if (response.Success && response.Data != null)
            {
                _hardware = response.Data;
                
                // Initialize the form model with current hardware data
                _model = new UpdateHardwareRequest
                {
                    Name = _hardware.Name,
                    Description = _hardware.Description,
                    HardwareTypeId = _hardware.HardwareTypeId,
                    SerialNumber = _hardware.SerialNumber,
                    Status = _hardware.Status,
                    PurchaseDate = _hardware.PurchaseDate,
                    PurchasePrice = _hardware.PurchasePrice,
                    Supplier = _hardware.Supplier,
                    WarrantyExpiry = _hardware.WarrantyExpiry,
                    LastMaintenanceDate = _hardware.LastMaintenanceDate,
                    NextMaintenanceDate = _hardware.NextMaintenanceDate,
                    Location = _hardware.Location,
                    Notes = _hardware.Notes,
                    Properties = _hardware.Properties?.ToDictionary(kv => kv.Key, kv => kv.Value?.ToString() ?? "") ?? new Dictionary<string, string>()
                };

                // Initialize dynamic properties
                _dynamicProperties = _model.Properties.ToDictionary(kv => kv.Key, kv => kv.Value);
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to load hardware");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load hardware: {ex.Message}");
        }
    }

    private async Task LoadHardwareTypes()
    {
        try
        {
            var response = await HardwareTypeService.GetHardwareTypesAsync();
            if (response.Success)
            {
                _hardwareTypes = response.Data;
                
                // Set the selected hardware type based on current hardware
                if (_hardware != null)
                {
                    _selectedHardwareType = _hardwareTypes?.FirstOrDefault(ht => ht.Id == _hardware.HardwareTypeId);
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load hardware types: {ex.Message}");
        }
    }

    private async Task CheckActiveAssignments()
    {
        try
        {
            _checkingAssignments = true;
            var response = await AssignmentService.GetAssignmentsByHardwareAsync(Id, page: 1, pageSize: 50);
            if (response.Success && response.Data != null)
            {
                _activeAssignments = response.Data.Items.Where(a => a.Status == AssignmentStatus.Active).ToList();
                _hasActiveAssignments = _activeAssignments.Any();
            }
        }
        catch (Exception ex)
        {
            // Assignment check is non-critical, so we don't show an error
        }
        finally
        {
            _checkingAssignments = false;
        }
    }

    private bool GetBooleanValue(string key)
    {
        return _dynamicProperties.TryGetValue(key, out var value) && 
               bool.TryParse(value, out var boolValue) && boolValue;
    }

    private void SetBooleanValue(string key, bool value)
    {
        _dynamicProperties[key] = value.ToString();
    }

    private string GetStatusHelperText()
    {
        if (_hasActiveAssignments)
            return "Status cannot be changed while hardware has active assignments";
        return "Current operational status of the hardware";
    }

    private async Task UpdateHardwareAsync()
    {
        try
        {
            _submitting = true;
            
            // Update dynamic properties from form
            _model.Properties = _dynamicProperties.Where(kv => !string.IsNullOrEmpty(kv.Value))
                                                 .ToDictionary(kv => kv.Key, kv => kv.Value);

            var response = await HardwareService.UpdateHardwareAsync(Id, _model);
            if (response.Success)
            {
                await NotificationService.ShowSuccessAsync("Hardware updated successfully");
                Navigation.NavigateTo($"/hardware/{Id}");
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to update hardware");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to update hardware: {ex.Message}");
        }
        finally
        {
            _submitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/hardware/{Id}");
    }
}