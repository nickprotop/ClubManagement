@page "/facility-bookings/{Id:guid}/edit"
@using ClubManagement.Client.Services
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using ClubManagement.Shared.Models.Authorization
@using Microsoft.AspNetCore.Authorization
@inject IFacilityService FacilityService
@inject IMemberService MemberService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Edit Facility Booking</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-center align-center" style="height: 50vh;">
        <MudProgressCircular Indeterminate="true" />
    </div>
}
else if (_booking == null)
{
    <MudAlert Severity="Severity.Error">
        Booking not found or you don't have permission to edit it.
    </MudAlert>
}
else
{
    <div class="d-flex align-center gap-3 mb-4">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                     Color="Color.Default"
                     OnClick="@(() => Navigation.NavigateTo($"/facility-bookings/{Id}"))"
                     Title="Back to Booking Details" />
        <MudText Typo="Typo.h4">Edit Facility Booking</MudText>
        <MudChip T="string" Color="@GetStatusColor(_booking.Status)" 
                Size="Size.Medium" 
                Variant="Variant.Filled">
            @_booking.Status
        </MudChip>
    </div>

    <MudForm @ref="_form" @bind-IsValid="_isFormValid">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <!-- Basic Information -->
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-4">Booking Information</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudField Label="Facility" Variant="Variant.Text">
                            <div class="d-flex align-center gap-2">
                                <MudIcon Icon="@(_selectedFacility?.Icon)" Size="Size.Small" />
                                @(_selectedFacility?.Name ?? "Unknown Facility")
                                @if (!string.IsNullOrEmpty(_selectedFacility?.Location))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">(@_selectedFacility.Location)</MudText>
                                }
                            </div>
                        </MudField>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudField Label="Member" Variant="Variant.Text">
                            <div>
                                <MudText Typo="Typo.body2">@(_selectedMember?.FullName ?? "Unknown Member")</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@(_selectedMember?.Email ?? "Unknown Email") - @(_selectedMember?.Tier.ToString() ?? "Unknown")</MudText>
                            </div>
                        </MudField>
                    </MudItem>

                    <!-- Date and Time -->
                    <MudItem xs="12">
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.h6" Class="mb-4">Date and Time</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudDatePicker @bind-Date="_bookingDate"
                                      Label="Booking Date"
                                      Required="true"
                                      RequiredError="Booking date is required"
                                      MinDate="DateTime.Today"
                                      Variant="Variant.Outlined"
                                      OnDateChanged="OnDateTimeChanged"
                                      Disabled="_booking.Status == BookingStatus.CheckedIn || _booking.Status == BookingStatus.CheckedOut" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudTimePicker @bind-Time="_startTime"
                                      Label="Start Time"
                                      Required="true"
                                      RequiredError="Start time is required"
                                      Variant="Variant.Outlined"
                                      OnTimeChanged="OnDateTimeChanged"
                                      Disabled="_booking.Status == BookingStatus.CheckedIn || _booking.Status == BookingStatus.CheckedOut" />
                    </MudItem>

                    <MudItem xs="12" sm="4">
                        <MudTimePicker @bind-Time="_endTime"
                                      Label="End Time"
                                      Required="true"
                                      RequiredError="End time is required"
                                      Variant="Variant.Outlined"
                                      OnTimeChanged="OnDateTimeChanged"
                                      Disabled="_booking.Status == BookingStatus.CheckedIn || _booking.Status == BookingStatus.CheckedOut" />
                    </MudItem>

                    <!-- Conflict Check Display -->
                    @if (_conflictCheckResult != null && (_booking.Status == BookingStatus.Confirmed))
                    {
                        <MudItem xs="12">
                            @if (_conflictCheckResult.Count == 0)
                            {
                                <MudAlert Severity="Severity.Success" Dense="true">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-2" />
                                    No conflicts found. This time slot is available.
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Error" Dense="true">
                                    <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-2" />
                                    Booking conflicts detected:
                                    @foreach (var conflict in _conflictCheckResult)
                                    {
                                        <div>- @conflict.MemberName (@GetConflictTimeRange(conflict))</div>
                                    }
                                </MudAlert>
                            }
                        </MudItem>
                    }

                    <!-- Additional Details -->
                    <MudItem xs="12">
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.h6" Class="mb-4">Additional Details</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_model.Purpose"
                                     Label="Purpose"
                                     Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="_model.ParticipantCount"
                                       Label="Participant Count"
                                       Min="1"
                                       Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudField Label="Booking Source" Variant="Variant.Text">
                            @(_booking?.BookingSource.ToString() ?? "Unknown")
                        </MudField>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudField Label="Cost" Variant="Variant.Text">
                            @if (_booking?.Cost.HasValue == true)
                            {
                                @_booking.Cost.Value.ToString("C")
                            }
                            else
                            {
                                <span>Free</span>
                            }
                        </MudField>
                    </MudItem>

                    <!-- Payment Information -->
                    @if (_booking.Cost.HasValue && _booking.Cost > 0)
                    {
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-4">Payment Information</MudText>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudField Label="Payment Method" Variant="Variant.Text">
                                @(_booking?.PaymentMethod ?? "Not specified")
                            </MudField>
                        </MudItem>

                        <MudItem xs="12" sm="6">
                            <MudDatePicker @bind-Date="_paymentDate"
                                          Label="Payment Date"
                                          Variant="Variant.Outlined"
                                          Clearable="true"
                                          OnDateChanged="OnPaymentDateChanged" />
                        </MudItem>
                    }

                    <!-- Status Management -->
                    @if (_booking.Status != BookingStatus.Cancelled)
                    {
                        <MudItem xs="12">
                            <MudDivider Class="my-4" />
                            <MudText Typo="Typo.h6" Class="mb-4">Status Management</MudText>
                        </MudItem>

                    }

                    <!-- Notes -->
                    <MudItem xs="12">
                        <MudDivider Class="my-4" />
                        <MudText Typo="Typo.h6" Class="mb-4">Notes</MudText>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_model.Notes"
                                     Label="Staff Notes"
                                     Lines="3"
                                     Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="_model.MemberNotes"
                                     Label="Member Notes"
                                     Lines="3"
                                     Variant="Variant.Outlined" />
                    </MudItem>

                    <!-- Member Access Validation -->
                    @if (_memberAccessResult != null && !_memberAccessResult.CanAccess)
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Warning">
                                <MudText Typo="Typo.subtitle2">Member Access Issues:</MudText>
                                @foreach (var reason in _memberAccessResult.ReasonsDenied)
                                {
                                    <MudText Typo="Typo.body2">- @reason</MudText>
                                }
                                @if (_memberAccessResult.MissingCertifications?.Count > 0)
                                {
                                    <MudText Typo="Typo.body2">Missing Certifications: @string.Join(", ", _memberAccessResult.MissingCertifications)</MudText>
                                }
                            </MudAlert>
                        </MudItem>
                    }

                    <!-- Cost Calculation Display -->
                    @if (_selectedFacility != null && _calculatedCost.HasValue)
                    {
                        <MudItem xs="12">
                            <MudCard Elevation="0" Class="border">
                                <MudCardContent>
                                    <MudText Typo="Typo.subtitle2" Class="mb-2">Cost Calculation:</MudText>
                                    <div class="d-flex justify-space-between">
                                        <MudText>Duration:</MudText>
                                        <MudText>@GetDurationText() hours</MudText>
                                    </div>
                                    <div class="d-flex justify-space-between">
                                        <MudText>Rate:</MudText>
                                        <MudText>@GetHourlyRate()</MudText>
                                    </div>
                                    <MudDivider Class="my-2" />
                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.subtitle1">Suggested Total:</MudText>
                                        <MudText Typo="Typo.subtitle1">@_calculatedCost.Value.ToString("C")</MudText>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Default" 
                          OnClick="@(() => Navigation.NavigateTo($"/facility-bookings/{Id}"))">
                    Cancel
                </MudButton>
                <MudSpacer />
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled"
                          OnClick="SubmitForm"
                          Disabled="_isSubmitting || (_conflictCheckResult?.Count > 0 && _booking.Status == BookingStatus.Confirmed)">
                    @if (_isSubmitting)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Updating...</MudText>
                    }
                    else
                    {
                        <MudText>Update Booking</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
}

@code {
    [Parameter] public Guid Id { get; set; }
    
    private MudForm _form = null!;
    private bool _isFormValid;
    private bool _isSubmitting;
    private bool _loading = true;

    private UpdateFacilityBookingRequest _model = new();
    private FacilityBookingDto? _booking;
    private List<FacilityDto>? _facilities;
    private List<MemberDto>? _members;
    private FacilityDto? _selectedFacility;
    private MemberDto? _selectedMember;
    
    // Date/Time fields
    private DateTime? _bookingDate;
    private TimeSpan? _startTime;
    private TimeSpan? _endTime;
    private DateTime? _paymentDate;
    
    // Validation results
    private List<FacilityBookingConflictDto>? _conflictCheckResult;
    private MemberFacilityAccessDto? _memberAccessResult;
    private decimal? _calculatedCost;

    protected override async Task OnInitializedAsync()
    {
        await LoadFacilities();
        await LoadMembers();
        await LoadBooking();
    }

    private async Task LoadFacilities()
    {
        try
        {
            var response = await FacilityService.GetFacilitiesAsync();
            if (response.Success)
            {
                _facilities = response.Data;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load facilities: {ex.Message}");
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            var response = await MemberService.GetMembersAsync(new MemberSearchRequest());
            if (response.Success && response.Data != null)
            {
                _members = response.Data.Items.Select(m => new MemberDto 
                { 
                    Id = m.Id, 
                    FirstName = m.FirstName,
                    LastName = m.LastName,
                    Email = m.Email,
                    Tier = m.Tier
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load members: {ex.Message}");
        }
    }

    private async Task LoadBooking()
    {
        try
        {
            _loading = true;
            var response = await FacilityService.GetFacilityBookingByIdAsync(Id);
            if (response.Success && response.Data != null)
            {
                _booking = response.Data;
                PopulateForm();
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to load booking");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to load booking: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void PopulateForm()
    {
        if (_booking == null) return;

        _model = new UpdateFacilityBookingRequest
        {
            StartDateTime = _booking.StartDateTime,
            EndDateTime = _booking.EndDateTime,
            Purpose = _booking.Purpose,
            ParticipantCount = _booking.ParticipantCount,
            Notes = _booking.Notes,
            MemberNotes = _booking.MemberNotes,
            Status = _booking.Status,
            CancellationReason = _booking.CancellationReason
        };

        // Map date/time fields
        _bookingDate = _booking.StartDateTime.Date;
        _startTime = _booking.StartDateTime.TimeOfDay;
        _endTime = _booking.EndDateTime.TimeOfDay;
        _paymentDate = _booking.PaymentDate;

        // Set selected items
        _selectedFacility = _facilities?.FirstOrDefault(f => f.Id == _booking.FacilityId);
        _selectedMember = _members?.FirstOrDefault(m => m.Id == _booking.MemberId);

        // Calculate initial cost
        CalculateCost();
    }

    private async Task OnFacilityChanged()
    {
        // _selectedFacility is set from the dropdown selection
        await ValidateBooking();
        CalculateCost();
    }

    private async Task OnMemberChanged()
    {
        // _selectedMember is set from the dropdown selection
        await ValidateBooking();
        CalculateCost();
    }

    private async Task OnDateTimeChanged()
    {
        UpdateDateTime();
        await ValidateBooking();
        CalculateCost();
    }

    private void OnPaymentDateChanged()
    {
        // PaymentDate is not in UpdateFacilityBookingRequest
    }

    private void UpdateDateTime()
    {
        if (_bookingDate.HasValue && _startTime.HasValue && _endTime.HasValue)
        {
            _model.StartDateTime = _bookingDate.Value.Date.Add(_startTime.Value);
            _model.EndDateTime = _bookingDate.Value.Date.Add(_endTime.Value);
        }
    }

    private void CalculateCost()
    {
        if (_selectedFacility != null && _model.StartDateTime != default && _model.EndDateTime != default)
        {
            var duration = _model.EndDateTime - _model.StartDateTime;
            var hours = (decimal)(duration?.TotalHours ?? 0);
            
            // Use member rate if member is selected and facility has member rates
            var hourlyRate = _selectedMember != null && _selectedFacility.MemberHourlyRate > 0
                ? _selectedFacility.MemberHourlyRate
                : _selectedFacility.HourlyRate ?? 0;
            
            _calculatedCost = hours * hourlyRate;
        }
    }

    private async Task ValidateBooking()
    {
        _conflictCheckResult = null;
        _memberAccessResult = null;
        
        if (_selectedFacility?.Id != Guid.Empty && _model.StartDateTime != default && _model.EndDateTime != default)
        {
            // Check for booking conflicts (excluding current booking)
            try
            {
                var conflictResponse = await FacilityService.CheckBookingConflictsAsync(
                    _selectedFacility.Id, _model.StartDateTime!.Value, _model.EndDateTime!.Value, Id);
                if (conflictResponse.Success)
                {
                    _conflictCheckResult = conflictResponse.Data;
                }
            }
            catch (Exception ex)
            {
                await NotificationService.ShowErrorAsync($"Failed to check conflicts: {ex.Message}");
            }
            
            // Check member access if member is selected
            if (_selectedMember?.Id != Guid.Empty)
            {
                try
                {
                    var accessResponse = await FacilityService.CheckMemberAccessAsync(_selectedFacility.Id, _selectedMember.Id);
                    if (accessResponse.Success)
                    {
                        _memberAccessResult = accessResponse.Data;
                    }
                }
                catch (Exception ex)
                {
                    await NotificationService.ShowErrorAsync($"Failed to check member access: {ex.Message}");
                }
            }
        }
    }

    private async Task SubmitForm()
    {
        if (_form == null) return;
        
        await _form.Validate();
        if (!_isFormValid) return;
        
        // Final validation
        UpdateDateTime();
        if (_model.StartDateTime >= _model.EndDateTime)
        {
            await NotificationService.ShowErrorAsync("End time must be after start time");
            return;
        }

        _isSubmitting = true;
        try
        {
            var response = await FacilityService.UpdateFacilityBookingAsync(Id, _model);
            if (response.Success && response.Data != null)
            {
                await NotificationService.ShowSuccessAsync("Facility booking updated successfully");
                Navigation.NavigateTo($"/facility-bookings/{Id}");
            }
            else
            {
                await NotificationService.ShowErrorAsync(response.Message ?? "Failed to update booking");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"Failed to update booking: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private string GetDurationText()
    {
        if (_model.StartDateTime == default || _model.EndDateTime == default) return "0";
        
        var duration = _model.EndDateTime - _model.StartDateTime;
        return duration?.TotalHours.ToString("F1") ?? "0";
    }

    private string GetHourlyRate()
    {
        if (_selectedFacility == null) return "N/A";
        
        var rate = _selectedMember != null && _selectedFacility.MemberHourlyRate > 0
            ? _selectedFacility.MemberHourlyRate
            : _selectedFacility.HourlyRate ?? 0;
            
        return rate > 0 ? rate.ToString("C") + "/hour" : "Free";
    }

    private Color GetStatusColor(BookingStatus status)
    {
        return status switch
        {
            BookingStatus.Confirmed => Color.Primary,
            BookingStatus.CheckedIn => Color.Success,
            BookingStatus.CheckedOut => Color.Info,
            BookingStatus.Cancelled => Color.Error,
            BookingStatus.NoShow => Color.Warning,
            _ => Color.Default
        };
    }

    private string GetConflictTimeRange(FacilityBookingConflictDto conflict)
    {
        return $"{conflict.StartDateTime:h:mm tt} - {conflict.EndDateTime:h:mm tt}";
    }
}