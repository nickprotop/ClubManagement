@page "/events/{EventId:guid}"
@using ClubManagement.Client.Services
@using ClubManagement.Client.Components
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@using ClubManagement.Shared.Models.Authorization
@inject IEventService EventService
@inject IMemberService MemberService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject INotificationService NotificationService

<PageTitle>Event Details - Club Management</PageTitle>

<MudBreadcrumbs Items="_breadcrumbItems" />

@if (_loading)
{
    <MudProgressLinear Indeterminate="true" />
    <MudText Align="Align.Center" Class="pa-4">Loading event details...</MudText>
}
else if (_event == null)
{
    <MudAlert Severity="Severity.Error">Event not found</MudAlert>
}
else
{
    <MudStack Spacing="4">
        <!-- Event Header -->
        <MudCard>
            <MudCardContent>
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.h4">@_event.Title</MudText>
                        <MudStack Row="true" Spacing="4" AlignItems="AlignItems.Center">
                            <MudChip T="string" Color="GetEventTypeColor(_event.Type)" Size="Size.Small">@_event.Type</MudChip>
                            <MudChip T="string" Color="GetEventStatusColor(_event.Status)" Size="Size.Small">@_event.Status</MudChip>
                            @if (_event.Price.HasValue && _event.Price > 0)
                            {
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">$@_event.Price.Value.ToString("F2")</MudChip>
                            }
                            else if (_event.Price == 0)
                            {
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">Free</MudChip>
                            }
                        </MudStack>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">@_event.Description</MudText>
                    </MudStack>
                    
                    <MudStack Row="true" Spacing="2">
                        @if (_permissions?.CanEdit == true)
                        {
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="EditEvent">
                                Edit
                            </MudButton>
                        }
                        @if (_permissions?.CanDelete == true)
                        {
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Error" 
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="DeleteEvent">
                                Delete
                            </MudButton>
                        }
                        @if (_permissions?.CanCancelEvent == true && _event.Status == EventStatus.Scheduled)
                        {
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Warning" 
                                       StartIcon="@Icons.Material.Filled.Cancel"
                                       OnClick="CancelEvent">
                                Cancel Event
                            </MudButton>
                        }
                        @if (_permissions?.CanRescheduleEvent == true && _event.Status == EventStatus.Scheduled)
                        {
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       StartIcon="@Icons.Material.Filled.Schedule"
                                       OnClick="RescheduleEvent">
                                Reschedule
                            </MudButton>
                        }
                    </MudStack>
                </MudStack>
            </MudCardContent>
        </MudCard>

        <!-- Event Information Grid -->
        <MudGrid>
            <!-- Basic Information -->
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Event Information</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="3">
                            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                                <MudText>
                                    <strong>Start:</strong> @_event.StartDateTime.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")
                                </MudText>
                            </MudStack>
                            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Small" />
                                <MudText>
                                    <strong>End:</strong> @_event.EndDateTime.ToString("dddd, MMMM dd, yyyy 'at' h:mm tt")
                                </MudText>
                            </MudStack>
                            @if (!string.IsNullOrEmpty(_event.FacilityName))
                            {
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Small" />
                                    <MudText><strong>Facility:</strong> @_event.FacilityName</MudText>
                                </MudStack>
                            }
                            @if (!string.IsNullOrEmpty(_event.InstructorName))
                            {
                                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                    <MudText><strong>Instructor:</strong> @_event.InstructorName</MudText>
                                </MudStack>
                            }
                            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />
                                <MudText><strong>Capacity:</strong> @_event.CurrentEnrollment / @_event.MaxCapacity</MudText>
                                <MudProgressLinear Value="@GetCapacityPercentage()" Color="@GetCapacityColor()" Style="width: 100px;" />
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Registration & Check-in Actions -->
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Actions</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Spacing="2">
                            @if (_permissions?.CanRegisterSelf == true && !_isUserRegistered)
                            {
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.PersonAdd"
                                           OnClick="RegisterSelf"
                                           FullWidth="true">
                                    Register for Event
                                </MudButton>
                            }
                            @if (_permissions?.CanRegisterOthers == true)
                            {
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.GroupAdd"
                                           OnClick="RegisterOthers"
                                           FullWidth="true">
                                    Register Others
                                </MudButton>
                            }
                            @if (_permissions?.CanCheckInSelf == true && _isUserRegistered && !_isUserCheckedIn)
                            {
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Success" 
                                           StartIcon="@Icons.Material.Filled.CheckCircle"
                                           OnClick="CheckInSelf"
                                           FullWidth="true">
                                    Check In
                                </MudButton>
                            }
                            @if (_isUserCheckedIn)
                            {
                                <MudAlert Severity="Severity.Success" Dense="true">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" />
                                        <MudText>You are checked in for this event</MudText>
                                    </MudStack>
                                </MudAlert>
                            }
                            @if (_isUserRegistered && !_isUserCheckedIn)
                            {
                                <MudAlert Severity="Severity.Info" Dense="true">
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                        <MudText>You are registered for this event</MudText>
                                        @if (_userRegistrationStatus != null)
                                        {
                                            <MudChip T="string" Size="Size.Small" 
                                                     Color="@GetRegistrationStatusColor(_userRegistrationStatus.Status)"
                                                     Icon="@GetRegistrationStatusIcon(_userRegistrationStatus.Status)">
                                                @GetRegistrationStatusText(_userRegistrationStatus.Status)
                                            </MudChip>
                                        }
                                    </MudStack>
                                </MudAlert>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Additional Information -->
        @if (!string.IsNullOrEmpty(_event.SpecialInstructions) || _event.RequiredEquipment.Any())
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Additional Information</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        @if (!string.IsNullOrEmpty(_event.SpecialInstructions))
                        {
                            <div>
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Special Instructions</MudText>
                                <MudAlert Severity="Severity.Info" Dense="true">
                                    @_event.SpecialInstructions
                                </MudAlert>
                            </div>
                        }
                        @if (_event.RequiredEquipment.Any())
                        {
                            <div>
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Required Equipment</MudText>
                                <MudStack Spacing="2">
                                    @foreach (var equipment in _event.RequiredEquipment)
                                    {
                                        var isHardware = IsHardwareRequirement(equipment);
                                        <div class="d-flex align-center gap-2">
                                            @if (isHardware)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Small" Color="Color.Primary" />
                                                <MudChip T="string" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">
                                                    @equipment
                                                </MudChip>
                                                @if (_permissions?.CanEdit == true)
                                                {
                                                    <MudTooltip Text="Manage hardware assignment">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Assignment" 
                                                                     Size="Size.Small" 
                                                                     Color="Color.Secondary"
                                                                     OnClick="@(() => NavigateToHardwareAssignment(equipment))" />
                                                    </MudTooltip>
                                                }
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Size="Size.Small" Color="Color.Default" />
                                                <MudChip T="string" Size="Size.Small" Color="Color.Default">
                                                    @equipment
                                                </MudChip>
                                            }
                                        </div>
                                    }
                                </MudStack>
                                
                                @if (_permissions?.CanEdit == true && HasHardwareRequirements())
                                {
                                    <MudDivider Class="my-2" />
                                    <MudStack Row="true" Spacing="1">
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Build"
                                                   Size="Size.Small"
                                                   Color="Color.Primary"
                                                   OnClick="@(() => Navigation.NavigateTo($"/hardware/assignments/create?eventId={EventId}"))">
                                            Assign Equipment
                                        </MudButton>
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Inventory"
                                                   Size="Size.Small"
                                                   Color="Color.Secondary"
                                                   OnClick="@(() => Navigation.NavigateTo($"/events/{EventId}/equipment"))">
                                            Manage Equipment
                                        </MudButton>
                                    </MudStack>
                                }
                            </div>
                        }
                    </MudStack>
                </MudCardContent>
            </MudCard>
        }

        <!-- Registrations Management (for authorized users) -->
        @if (_permissions?.CanViewRegistrations == true)
        {
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Registrations (@_registrations.Count)</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @if (_permissions?.CanCheckInOthers == true)
                        {
                            <MudButton Variant="Variant.Text" 
                                       Color="Color.Primary" 
                                       StartIcon="@Icons.Material.Filled.CheckCircle"
                                       OnClick="ShowCheckInInterface">
                                Check-in Interface
                            </MudButton>
                        }
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (_registrations.Any())
                    {
                        <MudTable Items="_registrations" Dense="true" Hover="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Member</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Registered</MudTh>
                                <MudTh>Check-in</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.MemberName</MudTd>
                                <MudTd>
                                    <MudChip T="string" Size="Size.Small" Color="GetRegistrationStatusColor(context.Status)">
                                        @context.Status
                                        @if (context.IsWaitlisted && context.WaitlistPosition.HasValue)
                                        {
                                            @($" (#{context.WaitlistPosition})")
                                        }
                                    </MudChip>
                                </MudTd>
                                <MudTd>@context.RegisteredAt.ToString("MM/dd/yyyy")</MudTd>
                                <MudTd>
                                    @if (context.CheckedInAt.HasValue)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Success">
                                            Checked In @context.CheckedInAt.Value.ToString("h:mm tt")
                                        </MudChip>
                                    }
                                    else if (context.NoShow)
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Error">No Show</MudChip>
                                    }
                                    else
                                    {
                                        <MudText>-</MudText>
                                    }
                                </MudTd>
                                <MudTd>
                                    <MudStack Row="true" Spacing="1">
                                        @if (_permissions?.CanCheckInOthers == true && context.Status == RegistrationStatus.Confirmed && !context.CheckedInAt.HasValue)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" 
                                                           Size="Size.Small" 
                                                           Color="Color.Success" 
                                                           OnClick="() => CheckInMember(context.MemberId)" />
                                        }
                                        @if (_permissions?.CanCheckInOthers == true && context.CheckedInAt.HasValue)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Undo" 
                                                           Size="Size.Small" 
                                                           Color="Color.Warning" 
                                                           OnClick="() => UndoCheckIn(context.MemberId)" />
                                        }
                                        @if (_permissions?.CanModifyRegistrations == true)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                           Size="Size.Small" 
                                                           Color="Color.Primary" 
                                                           OnClick="() => EditRegistration(context)" />
                                        }
                                    </MudStack>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Align="Align.Center" Color="Color.Secondary">No registrations yet</MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
    </MudStack>
}

@code {
    [Parameter] public Guid EventId { get; set; }

    private EventDto? _event;
    private EventPermissions? _permissions;
    private List<EventRegistrationDto> _registrations = new();
    private bool _loading = true;
    private bool _isUserRegistered;
    private bool _isUserCheckedIn;
    private EventRegistrationDto? _userRegistrationStatus;

    private List<BreadcrumbItem> _breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetailsAsync();
        SetupBreadcrumbs();
    }

    private async Task LoadEventDetailsAsync()
    {
        _loading = true;
        
        try
        {
            // Load event details
            var eventResponse = await EventService.GetEventAsync(EventId);
            if (eventResponse?.Success == true)
            {
                _event = eventResponse.Data;
            }

            // Load permissions
            _permissions = await EventService.GetEventPermissionsAsync(EventId);

            // Load registrations if permitted
            if (_permissions?.CanViewRegistrations == true)
            {
                var registrationsResponse = await EventService.GetEventRegistrationsAsync(EventId);
                if (registrationsResponse?.Success == true)
                {
                    _registrations = registrationsResponse.Data ?? new();
                }
            }

            // Check user registration status
            CheckUserRegistrationStatus();
            
            // Load detailed user registration status
            await LoadUserRegistrationStatus();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading event details: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void CheckUserRegistrationStatus()
    {
        if (_event?.Registrations != null)
        {
            var userRegistration = _event.Registrations.FirstOrDefault(r => r.Status == RegistrationStatus.Confirmed);
            _isUserRegistered = userRegistration != null;
            // Check-in status would need to be determined from full registration data
        }
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Events", href: "/events", icon: Icons.Material.Filled.Event),
            new BreadcrumbItem(_event?.Title ?? "Event Details", href: null, disabled: true, icon: Icons.Material.Filled.Info)
        };
    }

    private async Task RegisterSelf()
    {
        // Check if this is a recurring event
        if (_event?.MasterEventId != null || _event?.IsRecurringMaster == true)
        {
            await ShowRecurringRegistrationDialog(true);
        }
        else
        {
            // Single event registration
            var request = new EventRegistrationRequest();
            var response = await EventService.RegisterForEventAsync(EventId, request);
            
            if (response?.Success == true)
            {
                Snackbar.Add(response.Message ?? "Successfully registered for event", Severity.Success);
                await LoadEventDetailsAsync();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to register for event", Severity.Error);
            }
        }
    }

    private async Task RegisterOthers()
    {
        // Check if this is a recurring event
        if (_event?.MasterEventId != null || _event?.IsRecurringMaster == true)
        {
            await ShowRecurringRegistrationDialog(false);
        }
        else
        {
            // Single event registration - use the enhanced member selection dialog
            var parameters = new DialogParameters
            {
                ["Title"] = "Select Member to Register",
                ["EventId"] = EventId,
                ["AllowMultipleSelection"] = true,
                ["SubmitButtonText"] = "Register Members"
            };

            var dialog = await DialogService.ShowAsync<MemberSelectionDialog>("Register Members", parameters);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data != null)
            {
                try
                {
                    List<Guid> memberIds;
                    
                    // Handle both single Guid and List<Guid> results
                    if (result.Data is Guid singleMemberId)
                    {
                        memberIds = new List<Guid> { singleMemberId };
                    }
                    else if (result.Data is List<Guid> multipleMemberIds)
                    {
                        memberIds = multipleMemberIds;
                    }
                    else
                    {
                        Snackbar.Add("Invalid member selection", Severity.Error);
                        return;
                    }

                    // Register each member individually for single events
                    int successCount = 0;
                    int failCount = 0;
                    
                    foreach (var memberId in memberIds)
                    {
                        var request = new EventRegistrationRequest { MemberId = memberId };
                        var response = await EventService.RegisterForEventAsync(EventId, request);
                        
                        if (response?.Success == true)
                        {
                            successCount++;
                        }
                        else
                        {
                            failCount++;
                        }
                    }
                    
                    if (successCount > 0)
                    {
                        var message = $"{successCount} member(s) registered successfully";
                        if (failCount > 0) message += $", {failCount} failed";
                        Snackbar.Add(message, failCount > 0 ? Severity.Warning : Severity.Success);
                        await LoadEventDetailsAsync();
                    }
                    else
                    {
                        Snackbar.Add("Failed to register any members", Severity.Error);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Error registering members: {ex.Message}", Severity.Error);
                }
            }
        }
    }

    private async Task CheckInSelf()
    {
        var response = await EventService.CheckInSelfAsync(EventId);
        
        if (response?.Success == true)
        {
            Snackbar.Add("Successfully checked in", Severity.Success);
            await LoadEventDetailsAsync();
        }
        else
        {
            Snackbar.Add(response?.Message ?? "Failed to check in", Severity.Error);
        }
    }

    private async Task CheckInMember(Guid memberId)
    {
        var response = await EventService.CheckInMemberAsync(EventId, memberId);
        
        if (response?.Success == true)
        {
            Snackbar.Add("Member checked in successfully", Severity.Success);
            await LoadEventDetailsAsync();
        }
        else
        {
            Snackbar.Add(response?.Message ?? "Failed to check in member", Severity.Error);
        }
    }

    private async Task UndoCheckIn(Guid memberId)
    {
        var response = await EventService.UndoCheckInAsync(EventId, memberId);
        
        if (response?.Success == true)
        {
            Snackbar.Add("Check-in undone successfully", Severity.Success);
            await LoadEventDetailsAsync();
        }
        else
        {
            Snackbar.Add(response?.Message ?? "Failed to undo check-in", Severity.Error);
        }
    }

    private async Task EditEvent()
    {
        Navigation.NavigateTo($"/events/{EventId}/edit");
    }

    private async Task DeleteEvent()
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Event",
            "Are you sure you want to delete this event? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            var response = await EventService.DeleteEventAsync(EventId);
            if (response?.Success == true)
            {
                Snackbar.Add("Event deleted successfully", Severity.Success);
                Navigation.NavigateTo("/events");
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to delete event", Severity.Error);
            }
        }
    }

    private async Task CancelEvent()
    {
        var parameters = new DialogParameters
        {
            ["EventTitle"] = _event?.Title ?? "Event"
        };

        var dialog = await DialogService.ShowAsync<CancelEventDialog>("Cancel Event", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CancelEventRequest cancelRequest)
        {
            try
            {
                var response = await EventService.CancelEventAsync(EventId, cancelRequest);
                
                if (response?.Success == true)
                {
                    Snackbar.Add(response.Message ?? "Event cancelled successfully", Severity.Success);
                    await LoadEventDetailsAsync();
                }
                else
                {
                    Snackbar.Add(response?.Message ?? "Failed to cancel event", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error cancelling event: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task RescheduleEvent()
    {
        var parameters = new DialogParameters
        {
            ["EventTitle"] = _event?.Title ?? "Event",
            ["CurrentStartTime"] = _event?.StartDateTime ?? DateTime.Now,
            ["CurrentEndTime"] = _event?.EndDateTime ?? DateTime.Now.AddHours(1)
        };

        var dialog = await DialogService.ShowAsync<RescheduleEventDialog>("Reschedule Event", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is RescheduleEventRequest rescheduleRequest)
        {
            try
            {
                var response = await EventService.RescheduleEventAsync(EventId, rescheduleRequest);
                
                if (response?.Success == true)
                {
                    Snackbar.Add(response.Message ?? "Event rescheduled successfully", Severity.Success);
                    await LoadEventDetailsAsync();
                }
                else
                {
                    Snackbar.Add(response?.Message ?? "Failed to reschedule event", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error rescheduling event: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ShowCheckInInterface()
    {
        var parameters = new DialogParameters
        {
            ["EventId"] = EventId,
            ["EventTitle"] = _event?.Title ?? "Event",
            ["Registrations"] = _registrations.Where(r => r.Status == RegistrationStatus.Confirmed).ToList()
        };

        var dialog = await DialogService.ShowAsync<BulkCheckInDialog>("Bulk Check-in", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });
        
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Refresh the registrations list
            await LoadEventDetailsAsync();
        }
    }

    private async Task EditRegistration(EventRegistrationDto registration)
    {
        var parameters = new DialogParameters
        {
            ["Registration"] = registration,
            ["EventTitle"] = _event?.Title ?? "Event"
        };

        var dialog = await DialogService.ShowAsync<EditRegistrationDialog>("Edit Registration", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UpdateRegistrationRequest updateRequest)
        {
            try
            {
                var response = await EventService.UpdateRegistrationAsync(EventId, registration.Id, updateRequest);
                
                if (response?.Success == true)
                {
                    Snackbar.Add(response.Message ?? "Registration updated successfully", Severity.Success);
                    await LoadEventDetailsAsync();
                }
                else
                {
                    Snackbar.Add(response?.Message ?? "Failed to update registration", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error updating registration: {ex.Message}", Severity.Error);
            }
        }
    }

    private double GetCapacityPercentage()
    {
        if (_event?.MaxCapacity == 0) return 0;
        return (double)_event.CurrentEnrollment / _event.MaxCapacity * 100;
    }

    private Color GetCapacityColor()
    {
        var percentage = GetCapacityPercentage();
        return percentage >= 90 ? Color.Error : percentage >= 75 ? Color.Warning : Color.Success;
    }

    private Color GetEventTypeColor(EventType type)
    {
        return type switch
        {
            EventType.Class => Color.Primary,
            EventType.Workshop => Color.Secondary,
            EventType.Tournament => Color.Error,
            EventType.Event => Color.Success,
            EventType.Private => Color.Info,
            EventType.Maintenance => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetEventStatusColor(EventStatus status)
    {
        return status switch
        {
            EventStatus.Scheduled => Color.Success,
            EventStatus.InProgress => Color.Info,
            EventStatus.Completed => Color.Dark,
            EventStatus.Cancelled => Color.Error,
            EventStatus.Rescheduled => Color.Warning,
            _ => Color.Default
        };
    }

    private Color GetRegistrationStatusColor(RegistrationStatus status)
    {
        return status switch
        {
            RegistrationStatus.Confirmed => Color.Success,
            RegistrationStatus.Pending => Color.Info,
            RegistrationStatus.Cancelled => Color.Error,
            RegistrationStatus.Waitlisted => Color.Warning,
            RegistrationStatus.NoShow => Color.Error,
            RegistrationStatus.Completed => Color.Dark,
            RegistrationStatus.Declined => Color.Error,
            _ => Color.Default
        };
    }

    private async Task ShowRecurringRegistrationDialog(bool isForSelf)
    {
        // Determine the master event ID
        var masterEventId = _event?.IsRecurringMaster == true ? _event.Id : _event?.MasterEventId;
        
        if (masterEventId == null)
        {
            Snackbar.Add("Unable to determine recurring event series", Severity.Error);
            return;
        }

        var parameters = new DialogParameters
        {
            ["Title"] = isForSelf ? "Register for Recurring Event" : "Register Others for Recurring Event",
            ["EventId"] = EventId,
            ["MasterEventId"] = masterEventId.Value,
            ["IsForSelf"] = isForSelf
        };

        var dialog = await DialogService.ShowAsync<RecurringRegistrationDialog>(
            isForSelf ? "Register for Series" : "Register Others for Series", 
            parameters,
            new DialogOptions 
            { 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true 
            });
        
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is RecurringRegistrationResponse response)
        {
            // Use enhanced notification service
            if (response.SuccessfulRegistrations > 0)
            {
                NotificationService.ShowRegistrationSuccess(
                    response.SuccessfulRegistrations, 
                    response.FailedRegistrations, 
                    response.Warnings);
                
                // Show recurring-specific success message
                if (_event != null)
                {
                    NotificationService.ShowRecurringRegistrationSuccess(
                        _event.Title,
                        response.SuccessfulRegistrations,
                        response.SuccessfulRegistrations + response.FailedRegistrations);
                }
            }
            else
            {
                NotificationService.ShowRegistrationFailure(
                    "No registrations were successful",
                    response.Results.FirstOrDefault()?.ErrorMessage);
            }
            
            // Reload event details to reflect changes
            await LoadEventDetailsAsync();
        }
    }

    private async Task LoadUserRegistrationStatus()
    {
        try
        {
            var response = await EventService.GetUserRegistrationStatusAsync(EventId);
            if (response?.Success == true)
            {
                _userRegistrationStatus = response.Data;
            }
        }
        catch (Exception)
        {
            // Ignore errors for registration status - it's not critical
            // This keeps the page functional even if user isn't registered
        }
    }

    private string GetRegistrationStatusIcon(RegistrationStatus status)
    {
        return status switch
        {
            RegistrationStatus.Confirmed => Icons.Material.Filled.CheckCircle,
            RegistrationStatus.Pending => Icons.Material.Filled.Schedule,
            RegistrationStatus.Waitlisted => Icons.Material.Filled.HourglassEmpty,
            RegistrationStatus.Cancelled => Icons.Material.Filled.Cancel,
            RegistrationStatus.NoShow => Icons.Material.Filled.PersonOff,
            RegistrationStatus.Completed => Icons.Material.Filled.Done,
            RegistrationStatus.Declined => Icons.Material.Filled.ThumbDown,
            _ => Icons.Material.Filled.Person
        };
    }

    private string GetRegistrationStatusText(RegistrationStatus status)
    {
        return status switch
        {
            RegistrationStatus.Confirmed => "Confirmed",
            RegistrationStatus.Pending => "Pending",
            RegistrationStatus.Waitlisted => "Waitlisted",
            RegistrationStatus.Cancelled => "Cancelled",
            RegistrationStatus.NoShow => "No Show",
            RegistrationStatus.Completed => "Attended",
            RegistrationStatus.Declined => "Declined",
            _ => "Unknown"
        };
    }
    
    // Equipment-related helper methods
    private bool IsHardwareRequirement(string equipment)
    {
        // Check if equipment string contains hardware indicators
        return equipment.Contains("x ") && 
               (equipment.Contains("(Required)") || equipment.Contains("(Mandatory)") || 
                equipment.Contains(" - ") || char.IsDigit(equipment[0]));
    }
    
    private bool HasHardwareRequirements()
    {
        return _event?.RequiredEquipment?.Any(eq => IsHardwareRequirement(eq)) == true;
    }
    
    private void NavigateToHardwareAssignment(string equipment)
    {
        // For now, navigate to general assignment page
        // In the future, this could parse the equipment and pre-fill the form
        Navigation.NavigateTo($"/hardware/assignments/create?eventId={EventId}&equipment={Uri.EscapeDataString(equipment)}");
    }
}