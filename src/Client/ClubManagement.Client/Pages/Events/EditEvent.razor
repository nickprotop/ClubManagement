@page "/events/{Id:guid}/edit"
@using ClubManagement.Client.Services
@using ClubManagement.Client.Components.Events
@using ClubManagement.Shared.DTOs
@using ClubManagement.Shared.Models
@inject IEventService EventService
@inject IHardwareTypeService HardwareTypeService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Edit Event - Club Management</PageTitle>

<MudBreadcrumbs Items="_breadcrumbItems" />

<MudStack Spacing="4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
        <MudText Typo="Typo.h4">Edit Event</MudText>
        <MudButton Color="Color.Secondary" 
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   Href="/events">
            Back to Events
        </MudButton>
    </MudStack>

    @if (_isLoading)
    {
        <MudStack AlignItems="AlignItems.Center" Class="pa-8">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" />
            <MudText>Loading event...</MudText>
        </MudStack>
    }
    else if (_event == null)
    {
        <MudCard>
            <MudCardContent>
                <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                    <MudIcon Icon="@Icons.Material.Filled.EventBusy" Size="Size.Large" Color="Color.Error" />
                    <MudText Typo="Typo.h6" Color="Color.Error">Event not found</MudText>
                </MudStack>
            </MudCardContent>
        </MudCard>
    }
    else
    {
        @if (_isRecurringOccurrence)
        {
            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Filled.Repeat">
                <MudText><strong>Recurring Event Occurrence</strong></MudText>
                <MudText>This is an occurrence of a recurring event. Changes will only affect this specific occurrence.</MudText>
            </MudAlert>
        }

        <MudForm @ref="_form" @bind-IsValid="_isFormValid">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Event Details</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudTextField @bind-Value="_request.Title" 
                                          Label="Event Title" 
                                          Variant="Variant.Outlined"
                                          Required="true" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect T="EventType" @bind-Value="_request.Type" 
                                       Label="Event Type" 
                                       Variant="Variant.Outlined"
                                       Required="true">
                                @foreach (EventType type in Enum.GetValues<EventType>())
                                {
                                    <MudSelectItem T="EventType" Value="type">@type</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_request.Description" 
                                          Label="Description" 
                                          Variant="Variant.Outlined"
                                          Lines="3"
                                          Required="true" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Schedule</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudDatePicker @bind-Date="_startDate" 
                                           Label="Start Date" 
                                           Variant="Variant.Outlined"
                                           Required="true" />
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudTimePicker @bind-Time="_startTime" 
                                           Label="Start Time" 
                                           Variant="Variant.Outlined"
                                           Required="true" />
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudTimePicker @bind-Time="_endTime" 
                                           Label="End Time" 
                                           Variant="Variant.Outlined"
                                           Required="true" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            @if (_editEntireSeries && _event?.Recurrence != null)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Recurrence Settings</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="4">
                                <MudSelect T="RecurrenceType" @bind-Value="_recurrenceType" 
                                           Label="Recurrence Type" 
                                           Variant="Variant.Outlined">
                                    @foreach (RecurrenceType type in Enum.GetValues<RecurrenceType>())
                                    {
                                        <MudSelectItem T="RecurrenceType" Value="type">@GetRecurrenceTypeDisplayName(type)</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            
                            @if (_recurrenceType != RecurrenceType.None)
                            {
                                <MudItem xs="12" md="4">
                                    <MudNumericField @bind-Value="_recurrenceInterval" 
                                                     Label="Repeat Every" 
                                                     Variant="Variant.Outlined"
                                                     Min="1"
                                                     Max="99" />
                                </MudItem>
                                
                                @if (_recurrenceType == RecurrenceType.Weekly)
                                {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.subtitle2" Class="mb-2">Days of Week</MudText>
                                        <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                                            <MudCheckBox @bind-Value="_sunday" Label="Sunday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_monday" Label="Monday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_tuesday" Label="Tuesday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_wednesday" Label="Wednesday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_thursday" Label="Thursday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_friday" Label="Friday" Color="Color.Primary" />
                                            <MudCheckBox @bind-Value="_saturday" Label="Saturday" Color="Color.Primary" />
                                        </MudStack>
                                    </MudItem>
                                }
                                
                                <!-- Recurrence End Options -->
                                <MudItem xs="12">
                                    <MudText Typo="Typo.subtitle2" Class="mb-2">Recurrence Ends</MudText>
                                    <MudRadioGroup T="RecurrenceEndType" @bind-SelectedOption="_recurrenceEndType">
                                        <MudRadio T="RecurrenceEndType" Option="RecurrenceEndType.Never" Color="Color.Primary">
                                            Never
                                        </MudRadio>
                                        <MudRadio T="RecurrenceEndType" Option="RecurrenceEndType.On" Color="Color.Primary">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudText>On</MudText>
                                                <MudDatePicker @bind-Date="_recurrenceEndDate" 
                                                               Label="End Date" 
                                                               Variant="Variant.Outlined"
                                                               Disabled="@(_recurrenceEndType != RecurrenceEndType.On)"
                                                               Class="flex-grow-0" 
                                                               Style="width: 200px;" />
                                            </MudStack>
                                        </MudRadio>
                                        <MudRadio T="RecurrenceEndType" Option="RecurrenceEndType.After" Color="Color.Primary">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                <MudText>After</MudText>
                                                <MudNumericField @bind-Value="_maxOccurrences"
                                                                 Label="Occurrences"
                                                                 Variant="Variant.Outlined"
                                                                 Disabled="@(_recurrenceEndType != RecurrenceEndType.After)"
                                                                 Min="1"
                                                                 Max="365"
                                                                 Class="flex-grow-0"
                                                                 Style="width: 120px;" />
                                                <MudText>occurrences</MudText>
                                            </MudStack>
                                        </MudRadio>
                                    </MudRadioGroup>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Event Details</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudNumericField @bind-Value="_request.MaxCapacity" 
                                             Label="Max Capacity" 
                                             Variant="Variant.Outlined"
                                             Min="0"
                                             Required="true" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudNumericField @bind-Value="_request.Price" 
                                             Label="Price ($)" 
                                             Variant="Variant.Outlined"
                                             Min="0"
                                             Format="F2" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSwitch T="bool" @bind-Checked="_request.AllowWaitlist" 
                                       Label="Allow Waitlist" 
                                       Color="Color.Primary" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <!-- Equipment Requirements Section -->
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Equipment Requirements</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton Variant="Variant.Text" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="AddEquipmentRequirement"
                                   Size="Size.Small">
                            Add Equipment
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <!-- Legacy Required Equipment Text Field -->
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_requiredEquipmentText" 
                                          Label="Required Equipment (Text)" 
                                          Variant="Variant.Outlined"
                                          Lines="2"
                                          HelperText="General equipment notes or items not in the hardware system"
                                          Placeholder="e.g., Comfortable clothing, water bottle, yoga mat..." />
                        </MudItem>
                        
                        <!-- Hardware Requirements -->
                        @if (_equipmentRequirements.Any())
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">Hardware Requirements</MudText>
                                <MudStack Spacing="2">
                                    @for (int i = 0; i < _equipmentRequirements.Count; i++)
                                    {
                                        var index = i; // Capture for closure
                                        var requirement = _equipmentRequirements[index];
                                        
                                        <MudCard Outlined="true">
                                            <MudCardContent>
                                                <MudGrid AlignItems="AlignItems.Center">
                                                    <MudItem xs="12" md="4">
                                                        <MudSelect T="Guid" @bind-Value="requirement.HardwareTypeId"
                                                                   Label="Hardware Type"
                                                                   Variant="Variant.Outlined"
                                                                   Required="true">
                                                            @if (_hardwareTypes != null)
                                                            {
                                                                @foreach (var type in _hardwareTypes)
                                                                {
                                                                    <MudSelectItem T="Guid" Value="type.Id">
                                                                        <div class="d-flex align-center">
                                                                            <MudIcon Icon="@type.Icon" Class="mr-2" Size="Size.Small" />
                                                                            @type.Name
                                                                        </div>
                                                                    </MudSelectItem>
                                                                }
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                    <MudItem xs="6" md="2">
                                                        <MudNumericField @bind-Value="requirement.QuantityRequired"
                                                                         Label="Quantity"
                                                                         Variant="Variant.Outlined"
                                                                         Min="1"
                                                                         Max="50" />
                                                    </MudItem>
                                                    <MudItem xs="6" md="2">
                                                        <MudSwitch @bind-Value="requirement.IsMandatory"
                                                                   Label="Mandatory"
                                                                   Color="Color.Primary" />
                                                    </MudItem>
                                                    <MudItem xs="6" md="2">
                                                        <MudSwitch @bind-Value="requirement.AutoAssign"
                                                                   Label="Auto-assign"
                                                                   Color="Color.Secondary" />
                                                    </MudItem>
                                                    <MudItem xs="6" md="2">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                       Color="Color.Error"
                                                                       Size="Size.Small"
                                                                       OnClick="() => RemoveEquipmentRequirement(index)"
                                                                       Title="Remove requirement" />
                                                    </MudItem>
                                                    @if (!string.IsNullOrEmpty(requirement.Notes))
                                                    {
                                                        <MudItem xs="12">
                                                            <MudTextField @bind-Value="requirement.Notes"
                                                                          Label="Notes"
                                                                          Variant="Variant.Outlined"
                                                                          Lines="1" />
                                                        </MudItem>
                                                    }
                                                    else
                                                    {
                                                        <MudItem xs="12">
                                                            <MudButton Variant="Variant.Text" 
                                                                       Size="Size.Small"
                                                                       StartIcon="@Icons.Material.Filled.Note"
                                                                       OnClick="() => requirement.Notes = string.Empty">
                                                                Add Notes
                                                            </MudButton>
                                                        </MudItem>
                                                    }
                                                </MudGrid>
                                            </MudCardContent>
                                        </MudCard>
                                    }
                                </MudStack>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudAlert Severity="Severity.Info">
                                    No specific hardware requirements. Use the text field above for general equipment notes.
                                </MudAlert>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <MudCard>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveEvent"
                               Disabled="@(!_isFormValid || _isSaving)">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Updating...</MudText>
                        }
                        else
                        {
                            <MudText>Update Event</MudText>
                        }
                    </MudButton>
                    <MudButton Variant="Variant.Text" 
                               Color="Color.Secondary"
                               Href="/events">
                        Cancel
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    }
</MudStack>

@code {
    [Parameter] public Guid Id { get; set; }

    private MudForm? _form;
    private bool _isFormValid;
    private bool _isSaving;
    private bool _isLoading = true;
    private bool _isRecurringOccurrence;
    private EditChoice? _editChoice;
    private bool _editEntireSeries = false;

    private EventDto? _event;
    private UpdateEventRequest _request = new();
    
    private DateTime? _startDate;
    private TimeSpan? _startTime;
    private TimeSpan? _endTime;
    
    // Equipment requirements
    private List<CreateEventEquipmentRequirementRequest> _equipmentRequirements = new();
    private List<HardwareTypeDto>? _hardwareTypes;
    private string _requiredEquipmentText = string.Empty;
    
    // Recurrence fields for series editing
    private RecurrenceType _recurrenceType;
    private int _recurrenceInterval = 1;
    // Individual boolean fields for better MudBlazor binding
    private bool _sunday = false;
    private bool _monday = false;
    private bool _tuesday = false;
    private bool _wednesday = false;
    private bool _thursday = false;
    private bool _friday = false;
    private bool _saturday = false;
    private RecurrenceEndType _recurrenceEndType = RecurrenceEndType.Never;
    private DateTime? _recurrenceEndDate;
    private int? _maxOccurrences;
    
    public enum RecurrenceEndType
    {
        Never,
        On,
        After
    }
    
    private List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Home", href: "/dashboard", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Events", href: "/events", icon: Icons.Material.Filled.Event),
        new BreadcrumbItem("Edit", href: null, disabled: true, icon: Icons.Material.Filled.Edit)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadHardwareTypes();
        await LoadEvent();
        
        // Show choice dialog for recurring events
        if (_event != null && (_event.IsRecurringMaster || _event.MasterEventId.HasValue))
        {
            await ShowEditChoiceDialog();
        }
    }

    private async Task LoadEvent()
    {
        try
        {
            var response = await EventService.GetEventAsync(Id);
            if (response?.Success == true && response.Data != null)
            {
                _event = response.Data;
                PopulateForm();
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Event not found", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading event: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void PopulateForm()
    {
        if (_event == null) return;

        _isRecurringOccurrence = _event.MasterEventId.HasValue;

        _request.Title = _event.Title;
        _request.Description = _event.Description;
        _request.Type = _event.Type;
        _request.MaxCapacity = _event.MaxCapacity;
        _request.Price = _event.Price;
        _request.AllowWaitlist = _event.AllowWaitlist;

        _startDate = _event.StartDateTime.Date;
        _startTime = _event.StartDateTime.TimeOfDay;
        _endTime = _event.EndDateTime.TimeOfDay;
        
        // Populate equipment requirements
        PopulateEquipmentRequirements();
        
        // Initialize recurrence fields for series editing
        InitializeDaysOfWeek();
        if (_event.Recurrence != null)
        {
            PopulateRecurrenceFields(_event.Recurrence);
        }
    }

    private void InitializeDaysOfWeek()
    {
        _sunday = _monday = _tuesday = _wednesday = _thursday = _friday = _saturday = false;
    }
    
    private void PopulateRecurrenceFields(RecurrencePattern recurrence)
    {
        _recurrenceType = recurrence.Type;
        _recurrenceInterval = recurrence.Interval;
        
        // Set days of week for weekly recurrence
        if (recurrence.Type == RecurrenceType.Weekly && recurrence.DaysOfWeek?.Any() == true)
        {
            foreach (var day in recurrence.DaysOfWeek)
            {
                SetDaySelected(day, true);
            }
        }
        
        // Force UI update after setting days
        StateHasChanged();
        
        // Set recurrence end options
        if (recurrence.EndDate.HasValue)
        {
            _recurrenceEndType = RecurrenceEndType.On;
            _recurrenceEndDate = recurrence.EndDate.Value.Date;
        }
        else if (recurrence.MaxOccurrences.HasValue)
        {
            _recurrenceEndType = RecurrenceEndType.After;
            _maxOccurrences = recurrence.MaxOccurrences.Value;
        }
        else
        {
            _recurrenceEndType = RecurrenceEndType.Never;
        }
    }
    
    private RecurrencePattern BuildRecurrencePattern()
    {
        var pattern = new RecurrencePattern
        {
            Type = _recurrenceType,
            Interval = _recurrenceInterval
        };
        
        // Set days of week for weekly recurrence
        if (_recurrenceType == RecurrenceType.Weekly)
        {
            pattern.DaysOfWeek = GetSelectedDays();
        }
        
        // Set recurrence end options
        switch (_recurrenceEndType)
        {
            case RecurrenceEndType.On:
                pattern.EndDate = _recurrenceEndDate;
                pattern.MaxOccurrences = null;
                break;
            case RecurrenceEndType.After:
                pattern.EndDate = null;
                pattern.MaxOccurrences = _maxOccurrences;
                break;
            case RecurrenceEndType.Never:
            default:
                pattern.EndDate = null;
                pattern.MaxOccurrences = null;
                break;
        }
        
        return pattern;
    }
    
    private string GetRecurrenceTypeDisplayName(RecurrenceType type) => type switch
    {
        RecurrenceType.None => "No Recurrence",
        RecurrenceType.Daily => "Daily",
        RecurrenceType.Weekly => "Weekly",
        RecurrenceType.Monthly => "Monthly",
        RecurrenceType.Yearly => "Yearly",
        _ => type.ToString()
    };

    private async Task LoadHardwareTypes()
    {
        try
        {
            var response = await HardwareTypeService.GetHardwareTypesAsync();
            if (response.Success)
            {
                _hardwareTypes = response.Data;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load hardware types: {ex.Message}", Severity.Warning);
        }
    }

    private void PopulateEquipmentRequirements()
    {
        if (_event == null) return;
        
        // Parse existing equipment requirements from RequiredEquipment text
        if (_event.RequiredEquipment?.Any() == true)
        {
            var textLines = new List<string>();
            var hardwareLines = new List<string>();
            
            foreach (var equipment in _event.RequiredEquipment)
            {
                // Try to parse hardware format: "2x Camera (Required) - Notes"
                if (TryParseHardwareRequirement(equipment, out var parsed))
                {
                    hardwareLines.Add(equipment);
                    _equipmentRequirements.Add(parsed);
                }
                else
                {
                    textLines.Add(equipment);
                }
            }
            
            // Set remaining text
            _requiredEquipmentText = string.Join("\n", textLines);
        }
    }

    private bool TryParseHardwareRequirement(string equipment, out CreateEventEquipmentRequirementRequest requirement)
    {
        requirement = new CreateEventEquipmentRequirementRequest();
        
        // Simple parsing logic - this is basic for now
        // Format expected: "2x Camera (Required) - Notes"
        if (_hardwareTypes != null)
        {
            foreach (var hardwareType in _hardwareTypes)
            {
                if (equipment.Contains(hardwareType.Name))
                {
                    requirement.HardwareTypeId = hardwareType.Id;
                    
                    // Extract quantity
                    var parts = equipment.Split('x');
                    if (parts.Length > 1 && int.TryParse(parts[0], out var quantity))
                    {
                        requirement.QuantityRequired = quantity;
                    }
                    else
                    {
                        requirement.QuantityRequired = 1;
                    }
                    
                    requirement.IsMandatory = equipment.Contains("(Required)");
                    requirement.AutoAssign = false;
                    
                    // Extract notes
                    var dashIndex = equipment.IndexOf(" - ");
                    if (dashIndex > 0 && dashIndex < equipment.Length - 3)
                    {
                        requirement.Notes = equipment.Substring(dashIndex + 3);
                    }
                    
                    return true;
                }
            }
        }
        
        return false;
    }

    private void AddEquipmentRequirement()
    {
        _equipmentRequirements.Add(new CreateEventEquipmentRequirementRequest
        {
            QuantityRequired = 1,
            IsMandatory = true,
            AutoAssign = false
        });
    }

    private void RemoveEquipmentRequirement(int index)
    {
        if (index >= 0 && index < _equipmentRequirements.Count)
        {
            _equipmentRequirements.RemoveAt(index);
        }
    }

    private async Task SaveEvent()
    {
        if (!_isFormValid)
        {
            Snackbar.Add("Please correct the validation errors", Severity.Error);
            return;
        }

        _isSaving = true;

        try
        {
            // Combine date and time
            if (_startDate.HasValue && _startTime.HasValue)
            {
                _request.StartDateTime = _startDate.Value.Date.Add(_startTime.Value);
            }

            if (_startDate.HasValue && _endTime.HasValue)
            {
                _request.EndDateTime = _startDate.Value.Date.Add(_endTime.Value);
            }

            // Validate end time is after start time
            if (_request.EndDateTime <= _request.StartDateTime)
            {
                Snackbar.Add("End time must be after start time", Severity.Error);
                return;
            }

            // Prepare equipment data - combine text and hardware requirements
            var equipmentList = new List<string>();
            
            // Add text-based equipment
            if (!string.IsNullOrWhiteSpace(_requiredEquipmentText))
            {
                var textEquipment = _requiredEquipmentText.Split('\n').Where(s => !string.IsNullOrWhiteSpace(s));
                equipmentList.AddRange(textEquipment);
            }
            
            // Add hardware requirements as text (for now, until backend integration is complete)
            foreach (var req in _equipmentRequirements.Where(eq => eq.HardwareTypeId != Guid.Empty))
            {
                var hardwareType = _hardwareTypes?.FirstOrDefault(ht => ht.Id == req.HardwareTypeId);
                if (hardwareType != null)
                {
                    var description = $"{req.QuantityRequired}x {hardwareType.Name}";
                    if (req.IsMandatory) description += " (Required)";
                    if (!string.IsNullOrEmpty(req.Notes)) description += $" - {req.Notes}";
                    equipmentList.Add(description);
                }
            }
            
            _request.RequiredEquipment = equipmentList;

            if (_editEntireSeries && _event != null)
            {
                // Update entire series
                await SaveEntireSeries();
            }
            else
            {
                // Update single event/occurrence
                var response = await EventService.UpdateEventAsync(Id, _request);
                
                if (response?.Success == true)
                {
                    var successMessage = _isRecurringOccurrence 
                        ? "Event occurrence updated successfully" 
                        : "Event updated successfully";
                    
                    Snackbar.Add(successMessage, Severity.Success);
                    Navigation.NavigateTo("/events");
                }
                else
                {
                    Snackbar.Add(response?.Message ?? "Failed to update event", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating event: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task SaveEntireSeries()
    {
        if (_event == null) return;

        var updateRequest = new UpdateRecurrenceRequest
        {
            Title = _request.Title,
            Description = _request.Description,
            Type = _request.Type,
            StartDateTime = _request.StartDateTime,
            EndDateTime = _request.EndDateTime,
            FacilityId = _request.FacilityId,
            InstructorId = _request.InstructorId,
            MaxCapacity = _request.MaxCapacity,
            Price = _request.Price,
            AllowWaitlist = _request.AllowWaitlist,
            SpecialInstructions = _request.SpecialInstructions,
            RequiredEquipment = _request.RequiredEquipment,
            RecurrencePattern = BuildRecurrencePattern(),
            UpdateStrategy = RecurrenceUpdateStrategy.PreserveRegistrations // Default safe option
        };

        var response = await EventService.UpdateRecurrenceSeriesAsync(Id, updateRequest);
        
        if (response?.Success == true)
        {
            var result = response.Data;
            var message = $"Series updated successfully. {result.OccurrencesCreated} events created, {result.OccurrencesDeleted} deleted";
            
            if (result.Warnings.Any())
            {
                message += $". {string.Join(". ", result.Warnings)}";
            }
            
            Snackbar.Add(message, Severity.Success);
            Navigation.NavigateTo("/events");
        }
        else
        {
            Snackbar.Add(response?.Message ?? "Failed to update series", Severity.Error);
        }
    }

    private async Task ShowEditChoiceDialog()
    {
        if (_event == null) return;

        var parameters = new DialogParameters<EditRecurrenceChoiceDialog>
        {
            { x => x.EventTitle, _event.Title },
            { x => x.EventDate, _event.StartDateTime },
            { x => x.EventType, _event.Type },
            { x => x.OccurrenceNumber, _event.OccurrenceNumber },
            { x => x.HasRegistrations, _event.Registrations.Any() } // Simple check, could be enhanced
        };

        var options = new DialogOptions() 
        { 
            MaxWidth = MaxWidth.Small, 
            FullWidth = true,
            BackdropClick = false,
            CloseOnEscapeKey = false
        };

        var dialog = await DialogService.ShowAsync<EditRecurrenceChoiceDialog>("", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            // User cancelled, navigate back
            Navigation.NavigateTo("/events");
            return;
        }

        _editChoice = (EditChoice)result.Data;
        _editEntireSeries = _editChoice == EditChoice.EntireSeries;

        // If editing entire series, we might need to load the master event
        if (_editEntireSeries && _event.MasterEventId.HasValue)
        {
            await LoadMasterEvent();
        }
    }

    private async Task LoadMasterEvent()
    {
        try
        {
            var response = await EventService.GetMasterEventAsync(Id);
            if (response?.Success == true && response.Data != null)
            {
                _event = response.Data;
                PopulateForm();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading master event: {ex.Message}", Severity.Error);
        }
    }

    private void SetDaySelected(DayOfWeek day, bool selected)
    {
        switch (day)
        {
            case DayOfWeek.Sunday: _sunday = selected; break;
            case DayOfWeek.Monday: _monday = selected; break;
            case DayOfWeek.Tuesday: _tuesday = selected; break;
            case DayOfWeek.Wednesday: _wednesday = selected; break;
            case DayOfWeek.Thursday: _thursday = selected; break;
            case DayOfWeek.Friday: _friday = selected; break;
            case DayOfWeek.Saturday: _saturday = selected; break;
        }
    }
    
    private List<DayOfWeek> GetSelectedDays()
    {
        var selected = new List<DayOfWeek>();
        if (_sunday) selected.Add(DayOfWeek.Sunday);
        if (_monday) selected.Add(DayOfWeek.Monday);
        if (_tuesday) selected.Add(DayOfWeek.Tuesday);
        if (_wednesday) selected.Add(DayOfWeek.Wednesday);
        if (_thursday) selected.Add(DayOfWeek.Thursday);
        if (_friday) selected.Add(DayOfWeek.Friday);
        if (_saturday) selected.Add(DayOfWeek.Saturday);
        return selected;
    }
}