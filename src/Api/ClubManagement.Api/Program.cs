using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;
using ClubManagement.Infrastructure.Data;
using ClubManagement.Infrastructure.Services;
using ClubManagement.Infrastructure.Authentication;
using Npgsql;

var builder = WebApplication.CreateBuilder(args);

// Check for required config.json file (generated by setup.sh)
var configPath = Path.Combine(Directory.GetCurrentDirectory(), "config.json");
if (!File.Exists(configPath))
{
    Console.WriteLine("‚ùå CONFIGURATION ERROR: config.json not found!");
    Console.WriteLine();
    Console.WriteLine("üîß The API requires a config.json configuration file to run.");
    Console.WriteLine("   This file is generated by the setup script.");
    Console.WriteLine();
    Console.WriteLine("üìã To configure the application:");
    Console.WriteLine("   1. Run the setup script: ./scripts/setup.sh");
    Console.WriteLine("   2. Or copy and configure: cp config.sample.json config.json");
    Console.WriteLine();
    Console.WriteLine("üí° The config.json file should be located at:");
    Console.WriteLine($"   {configPath}");
    Console.WriteLine();
    Console.WriteLine("üö´ Application startup aborted.");
    Environment.Exit(1);
}

Console.WriteLine("‚úÖ Configuration loaded from config.json");
builder.Configuration.AddJsonFile(configPath, optional: false, reloadOnChange: true);

// Determine if running in Docker
var isDocker = builder.Configuration.GetValue<bool>("Deployment:IsDocker", false);
var clientBaseUrl = builder.Configuration.GetValue<string>("Application:ClientBaseUrl") ?? "http://localhost:4002";

// Configure URLs - different for Docker vs local
if (isDocker)
{
    builder.WebHost.UseUrls("http://+:80", "https://+:443");
}
else
{
    builder.WebHost.UseUrls("http://localhost:4000", "https://localhost:4001");
}

// Add services
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Club Management API", Version = "v1" });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });
});

// Database - use custom connection string from config.json
var connectionString = builder.Configuration.GetValue<string>("Database:ConnectionString") 
    ?? builder.Configuration.GetConnectionString("DefaultConnection")
    ?? throw new InvalidOperationException("Database connection string not configured");

builder.Services.AddDbContext<ClubManagementDbContext>(options =>
    options.UseNpgsql(connectionString));

// Authentication
var jwtSettings = builder.Configuration.GetSection("Jwt");
var secretKey = jwtSettings["SecretKey"] ?? throw new InvalidOperationException("JWT SecretKey not configured");

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings["Issuer"],
            ValidAudience = jwtSettings["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(secretKey)),
            ClockSkew = TimeSpan.Zero
        };
    });

builder.Services.AddAuthorization();

// CORS - use client URL from config
var allowedOrigins = new[] { 
    "http://localhost:4002", 
    "https://localhost:4003",  // Keep HTTPS for production
    clientBaseUrl,
    clientBaseUrl.Replace("https://", "http://").Replace(":4003", ":4002")
};

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowBlazorClient", policy =>
    {
        policy.WithOrigins(allowedOrigins)
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials();
    });
});

// Custom services
builder.Services.AddScoped<ITenantService, TenantService>();
builder.Services.AddScoped<ITenantDbContextFactory, TenantDbContextFactory>();
builder.Services.AddScoped<IJwtService, JwtService>();
builder.Services.AddScoped<IPasswordService, PasswordService>();
builder.Services.AddScoped<DbSeeder>();

var app = builder.Build();

// Display startup configuration information
Console.WriteLine();
Console.WriteLine("üèä Club Management API Starting...");
Console.WriteLine("===================================");
Console.WriteLine($"üåç Environment: {app.Environment.EnvironmentName}");
Console.WriteLine($"üê≥ Docker Mode: {(isDocker ? "Yes" : "No")}");
Console.WriteLine($"üåê API URLs: {(isDocker ? "http://+:80, https://+:443" : "http://localhost:4000, https://localhost:4001")}");
Console.WriteLine($"üé® Client URL: {clientBaseUrl}");

// Log database connection (without password for security)
var dbConnectionString = builder.Configuration.GetValue<string>("Database:ConnectionString");
if (!string.IsNullOrEmpty(dbConnectionString))
{
    var connBuilder = new NpgsqlConnectionStringBuilder(dbConnectionString);
    Console.WriteLine($"üóÑÔ∏è  Database: {connBuilder.Host}:{connBuilder.Port}/{connBuilder.Database} (User: {connBuilder.Username})");
}

// Log Redis connection
var redisHost = builder.Configuration.GetValue<string>("Redis:Host");
var redisPort = builder.Configuration.GetValue<string>("Redis:Port");
if (!string.IsNullOrEmpty(redisHost))
{
    Console.WriteLine($"üì¶ Redis: {redisHost}:{redisPort}");
}

// Log MinIO connection
var minioEndpoint = builder.Configuration.GetValue<string>("MinIO:Endpoint");
if (!string.IsNullOrEmpty(minioEndpoint))
{
    Console.WriteLine($"üíæ MinIO: {minioEndpoint}");
}

Console.WriteLine("===================================");
Console.WriteLine();

// Configure pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseCors("AllowBlazorClient");

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.MapGet("/health", () => Results.Ok(new { Status = "Healthy", Timestamp = DateTime.UtcNow }));

// Initialize database with migrations and seeding
Console.WriteLine("üóÑÔ∏è Initializing database...");
using (var scope = app.Services.CreateScope())
{
    try
    {
        var seeder = scope.ServiceProvider.GetRequiredService<DbSeeder>();
        await seeder.SeedAsync();
        Console.WriteLine("‚úÖ Database initialization completed successfully");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Database initialization failed: {ex.Message}");
        Console.WriteLine("üîß Please check your database connection and configuration");
        
        // Don't exit in development - let the API start anyway
        if (!app.Environment.IsDevelopment())
        {
            Environment.Exit(1);
        }
    }
}

Console.WriteLine("üöÄ API is ready and listening for requests!");
Console.WriteLine("===================================");
Console.WriteLine();

app.Run();
